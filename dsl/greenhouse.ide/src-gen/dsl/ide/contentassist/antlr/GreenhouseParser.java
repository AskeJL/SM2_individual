/*
 * generated by Xtext 2.25.0
 */
package dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dsl.ide.contentassist.antlr.internal.InternalGreenhouseParser;
import dsl.services.GreenhouseGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GreenhouseParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GreenhouseGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GreenhouseGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGreenhouseElementAccess().getAlternatives(), "rule__GreenhouseElement__Alternatives");
			builder.put(grammarAccess.getRowElementAccess().getAlternatives(), "rule__RowElement__Alternatives");
			builder.put(grammarAccess.getStateAccess().getOpAlternatives_3_0(), "rule__State__OpAlternatives_3_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getGreenhouseAccess().getGroup(), "rule__Greenhouse__Group__0");
			builder.put(grammarAccess.getRowAccess().getGroup(), "rule__Row__Group__0");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getGroup(), "rule__GreenhouseActuator__Group__0");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getGroup_3(), "rule__GreenhouseActuator__Group_3__0");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getGroup_4(), "rule__GreenhouseActuator__Group_4__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_2(), "rule__Actuator__Group_2__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_3(), "rule__Actuator__Group_3__0");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getGroup(), "rule__GreenhouseSensor__Group__0");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getGroup_7(), "rule__GreenhouseSensor__Group_7__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_7(), "rule__Sensor__Group_7__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
			builder.put(grammarAccess.getSettingAccess().getGroup(), "rule__Setting__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
			builder.put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
			builder.put(grammarAccess.getGreenhouseRuleSetAccess().getGroup(), "rule__GreenhouseRuleSet__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getGreenhousesAssignment_2(), "rule__Model__GreenhousesAssignment_2");
			builder.put(grammarAccess.getGreenhouseAccess().getNameAssignment_1(), "rule__Greenhouse__NameAssignment_1");
			builder.put(grammarAccess.getGreenhouseAccess().getRowAssignment_3(), "rule__Greenhouse__RowAssignment_3");
			builder.put(grammarAccess.getGreenhouseAccess().getElementsAssignment_4(), "rule__Greenhouse__ElementsAssignment_4");
			builder.put(grammarAccess.getRowAccess().getNameAssignment_1(), "rule__Row__NameAssignment_1");
			builder.put(grammarAccess.getRowAccess().getElementsAssignment_4(), "rule__Row__ElementsAssignment_4");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getNameAssignment_2(), "rule__GreenhouseActuator__NameAssignment_2");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getActionAssignment_3_1(), "rule__GreenhouseActuator__ActionAssignment_3_1");
			builder.put(grammarAccess.getGreenhouseActuatorAccess().getActionAssignment_4_2(), "rule__GreenhouseActuator__ActionAssignment_4_2");
			builder.put(grammarAccess.getActuatorAccess().getNameAssignment_1(), "rule__Actuator__NameAssignment_1");
			builder.put(grammarAccess.getActuatorAccess().getActionAssignment_2_1(), "rule__Actuator__ActionAssignment_2_1");
			builder.put(grammarAccess.getActuatorAccess().getActionAssignment_3_2(), "rule__Actuator__ActionAssignment_3_2");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getNameAssignment_2(), "rule__GreenhouseSensor__NameAssignment_2");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getVariableAssignment_5(), "rule__GreenhouseSensor__VariableAssignment_5");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getStatesAssignment_6(), "rule__GreenhouseSensor__StatesAssignment_6");
			builder.put(grammarAccess.getGreenhouseSensorAccess().getStatesAssignment_7_1(), "rule__GreenhouseSensor__StatesAssignment_7_1");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getVariableAssignment_3(), "rule__Sensor__VariableAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getStatesAssignment_6(), "rule__Sensor__StatesAssignment_6");
			builder.put(grammarAccess.getSensorAccess().getStatesAssignment_7_1(), "rule__Sensor__StatesAssignment_7_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
			builder.put(grammarAccess.getStateAccess().getVariableAssignment_2(), "rule__State__VariableAssignment_2");
			builder.put(grammarAccess.getStateAccess().getOpAssignment_3(), "rule__State__OpAssignment_3");
			builder.put(grammarAccess.getStateAccess().getThresholdAssignment_4(), "rule__State__ThresholdAssignment_4");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_0(), "rule__Action__NameAssignment_0");
			builder.put(grammarAccess.getActionAccess().getTriggerAssignment_3(), "rule__Action__TriggerAssignment_3");
			builder.put(grammarAccess.getActionAccess().getSettingAssignment_6(), "rule__Action__SettingAssignment_6");
			builder.put(grammarAccess.getActionAccess().getValueAssignment_8(), "rule__Action__ValueAssignment_8");
			builder.put(grammarAccess.getTriggerAccess().getNameAssignment_1(), "rule__Trigger__NameAssignment_1");
			builder.put(grammarAccess.getSettingAccess().getNameAssignment_1(), "rule__Setting__NameAssignment_1");
			builder.put(grammarAccess.getValueAccess().getNameAssignment_1(), "rule__Value__NameAssignment_1");
			builder.put(grammarAccess.getRuleSetAccess().getActuatorAssignment_1(), "rule__RuleSet__ActuatorAssignment_1");
			builder.put(grammarAccess.getRuleSetAccess().getActionAssignment_3(), "rule__RuleSet__ActionAssignment_3");
			builder.put(grammarAccess.getRuleSetAccess().getSensorAssignment_5(), "rule__RuleSet__SensorAssignment_5");
			builder.put(grammarAccess.getRuleSetAccess().getStateAssignment_7(), "rule__RuleSet__StateAssignment_7");
			builder.put(grammarAccess.getGreenhouseRuleSetAccess().getActuatorAssignment_1(), "rule__GreenhouseRuleSet__ActuatorAssignment_1");
			builder.put(grammarAccess.getGreenhouseRuleSetAccess().getActionAssignment_3(), "rule__GreenhouseRuleSet__ActionAssignment_3");
			builder.put(grammarAccess.getGreenhouseRuleSetAccess().getSensorAssignment_5(), "rule__GreenhouseRuleSet__SensorAssignment_5");
			builder.put(grammarAccess.getGreenhouseRuleSetAccess().getStateAssignment_7(), "rule__GreenhouseRuleSet__StateAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GreenhouseGrammarAccess grammarAccess;

	@Override
	protected InternalGreenhouseParser createParser() {
		InternalGreenhouseParser result = new InternalGreenhouseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GreenhouseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GreenhouseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
