/*
 * generated by Xtext 2.25.0
 */
package dsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import dsl.greenhouse.Action
import dsl.greenhouse.State
import dsl.greenhouse.RowSensor
import dsl.greenhouse.RowActuator
import dsl.greenhouse.RowRuleSet
import dsl.greenhouse.SettingSensor
import dsl.greenhouse.SettingActuator

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GreenhouseScopeProvider extends AbstractGreenhouseScopeProvider {
	
	
	override getScope(EObject context, EReference reference) {
		return context.scopeForEObject(reference)
	}
	
	def dispatch scopeForEObject(EObject context, EReference reference) {
		return super.getScope(context.eContainer, reference)
	}
	
	def dispatch scopeForEObject(RowActuator context, EReference reference) {
		
		
		val root = EcoreUtil2.getRootContainer(context);
		
		val allActuators = EcoreUtil2.getAllContentsOfType(root, SettingActuator)
		
		System.out.println(allActuators)
		Scopes.scopeFor(#[context], Scopes.scopeFor(allActuators))
	}
	
//	def dispatch scopeForEObject(RowSensor sensor, EReference reference) {
//		System.out.println(sensor.eContainer.eContents)
//		val root = EcoreUtil2.getRootContainer(sensor)
//		
//		//Scopes.scopeFor(#[row], Scopes.scopeFor(row.eContents))
//		val allActions = EcoreUtil2.getAllContentsOfType(root, SettingSensor)
//		
//		System.out.println(allActions)
//		Scopes.scopeFor(#[sensor], Scopes.scopeFor(allActions))
//	}
	
	def dispatch scopeForEObject(RowRuleSet rule, EReference reference) {	
		
		System.out.println(rule.eContainer.eContents)
		val row = rule.eContainer
		//Scopes.scopeFor(#[row], Scopes.scopeFor(row.eContents))
		val allActions = EcoreUtil2.getAllContentsOfType(row, Action)
		val allSensor = EcoreUtil2.getAllContentsOfType(row, RowSensor)
		val allStates = EcoreUtil2.getAllContentsOfType(row, State)
		val allActuators = EcoreUtil2.getAllContentsOfType(row, RowActuator)
		
		System.out.println(allActions)
		Scopes.scopeFor(
			allSensor, 
			Scopes.scopeFor(
				allActuators,
				Scopes.scopeFor(
					allActions, 
					Scopes.scopeFor(
						allStates
					)
				)
			)
		)
	}
	
		
	


}
