/**
 * generated by Xtext 2.25.0
 */
package dsl.greenhouse.impl;

import dsl.greenhouse.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GreenhouseFactoryImpl extends EFactoryImpl implements GreenhouseFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GreenhouseFactory init()
  {
    try
    {
      GreenhouseFactory theGreenhouseFactory = (GreenhouseFactory)EPackage.Registry.INSTANCE.getEFactory(GreenhousePackage.eNS_URI);
      if (theGreenhouseFactory != null)
      {
        return theGreenhouseFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GreenhouseFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GreenhouseFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GreenhousePackage.MODEL: return createModel();
      case GreenhousePackage.GREENHOUSE: return createGreenhouse();
      case GreenhousePackage.ROW: return createRow();
      case GreenhousePackage.GREENHOUSE_ELEMENT: return createGreenhouseElement();
      case GreenhousePackage.ROW_ELEMENT: return createRowElement();
      case GreenhousePackage.GREENHOUSE_ACTUATOR: return createGreenhouseActuator();
      case GreenhousePackage.ACTUATOR: return createActuator();
      case GreenhousePackage.GREENHOUSE_SENSOR: return createGreenhouseSensor();
      case GreenhousePackage.SENSOR: return createSensor();
      case GreenhousePackage.STATE: return createState();
      case GreenhousePackage.VARIABLE: return createVariable();
      case GreenhousePackage.ACTION: return createAction();
      case GreenhousePackage.TRIGGER: return createTrigger();
      case GreenhousePackage.SETTING: return createSetting();
      case GreenhousePackage.VALUE: return createValue();
      case GreenhousePackage.RULE_SET: return createRuleSet();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greenhouse createGreenhouse()
  {
    GreenhouseImpl greenhouse = new GreenhouseImpl();
    return greenhouse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreenhouseElement createGreenhouseElement()
  {
    GreenhouseElementImpl greenhouseElement = new GreenhouseElementImpl();
    return greenhouseElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RowElement createRowElement()
  {
    RowElementImpl rowElement = new RowElementImpl();
    return rowElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreenhouseActuator createGreenhouseActuator()
  {
    GreenhouseActuatorImpl greenhouseActuator = new GreenhouseActuatorImpl();
    return greenhouseActuator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actuator createActuator()
  {
    ActuatorImpl actuator = new ActuatorImpl();
    return actuator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreenhouseSensor createGreenhouseSensor()
  {
    GreenhouseSensorImpl greenhouseSensor = new GreenhouseSensorImpl();
    return greenhouseSensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sensor createSensor()
  {
    SensorImpl sensor = new SensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trigger createTrigger()
  {
    TriggerImpl trigger = new TriggerImpl();
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Setting createSetting()
  {
    SettingImpl setting = new SettingImpl();
    return setting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleSet createRuleSet()
  {
    RuleSetImpl ruleSet = new RuleSetImpl();
    return ruleSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreenhousePackage getGreenhousePackage()
  {
    return (GreenhousePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GreenhousePackage getPackage()
  {
    return GreenhousePackage.eINSTANCE;
  }

} //GreenhouseFactoryImpl
