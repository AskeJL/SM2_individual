/*
 * generated by Xtext 2.25.0
 */
package dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GreenhouseGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGreenhousesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGreenhousesGreenhouseParserRuleCall_2_0 = (RuleCall)cGreenhousesAssignment_2.eContents().get(0);
		
		//Model:
		//    "system" name=ID
		//    greenhouses+=Greenhouse*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"system" name=ID
		//greenhouses+=Greenhouse*
		public Group getGroup() { return cGroup; }
		
		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//greenhouses+=Greenhouse*
		public Assignment getGreenhousesAssignment_2() { return cGreenhousesAssignment_2; }
		
		//Greenhouse
		public RuleCall getGreenhousesGreenhouseParserRuleCall_2_0() { return cGreenhousesGreenhouseParserRuleCall_2_0; }
	}
	public class GreenhouseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Greenhouse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreenhouseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowRowParserRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsGreenhouseElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Greenhouse:
		//    'greenhouse' name=ID
		//    '[' row+=Row* elements+=GreenhouseElement* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'greenhouse' name=ID
		//'[' row+=Row* elements+=GreenhouseElement* ']'
		public Group getGroup() { return cGroup; }
		
		//'greenhouse'
		public Keyword getGreenhouseKeyword_0() { return cGreenhouseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//row+=Row*
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//Row
		public RuleCall getRowRowParserRuleCall_3_0() { return cRowRowParserRuleCall_3_0; }
		
		//elements+=GreenhouseElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//GreenhouseElement
		public RuleCall getElementsGreenhouseElementParserRuleCall_4_0() { return cElementsGreenhouseElementParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsRowElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Row:
		//    'row' name=ID 'includes'
		//    '[' elements+=RowElement* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'row' name=ID 'includes'
		//'[' elements+=RowElement* ']'
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'includes'
		public Keyword getIncludesKeyword_2() { return cIncludesKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//elements+=RowElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//RowElement
		public RuleCall getElementsRowElementParserRuleCall_4_0() { return cElementsRowElementParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class GreenhouseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGreenhouseSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreenhouseActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGreenhouseRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GreenhouseElement:
		//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreenhouseSensor
		public RuleCall getGreenhouseSensorParserRuleCall_0() { return cGreenhouseSensorParserRuleCall_0; }
		
		//GreenhouseActuator
		public RuleCall getGreenhouseActuatorParserRuleCall_1() { return cGreenhouseActuatorParserRuleCall_1; }
		
		//GreenhouseRuleSet
		public RuleCall getGreenhouseRuleSetParserRuleCall_2() { return cGreenhouseRuleSetParserRuleCall_2; }
	}
	public class RowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RowElement:
		//     Sensor |  Actuator | RuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor |  Actuator | RuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
		
		//RuleSet
		public RuleCall getRuleSetParserRuleCall_2() { return cRuleSetParserRuleCall_2; }
	}
	public class GreenhouseActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCanKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_3_1_0 = (RuleCall)cActionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cCanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_4_2_0 = (RuleCall)cActionAssignment_4_2.eContents().get(0);
		
		//GreenhouseActuator:
		//      'global' 'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('can' action+=Action)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'can'
		public Keyword getCanKeyword_3_0() { return cCanKeyword_3_0; }
		
		//action+=Action
		public Assignment getActionAssignment_3_1() { return cActionAssignment_3_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_1_0() { return cActionActionParserRuleCall_3_1_0; }
		
		//(',' 'can' action+=Action)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'can'
		public Keyword getCanKeyword_4_1() { return cCanKeyword_4_1; }
		
		//action+=Action
		public Assignment getActionAssignment_4_2() { return cActionAssignment_4_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_4_2_0() { return cActionActionParserRuleCall_4_2_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCanKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_2_1_0 = (RuleCall)cActionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cCanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cActionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_3_2_0 = (RuleCall)cActionAssignment_3_2.eContents().get(0);
		
		//Actuator:
		//     'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('can' action+=Action)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'can'
		public Keyword getCanKeyword_2_0() { return cCanKeyword_2_0; }
		
		//action+=Action
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_1_0() { return cActionActionParserRuleCall_2_1_0; }
		
		//(',' 'can' action+=Action)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//'can'
		public Keyword getCanKeyword_3_1() { return cCanKeyword_3_1; }
		
		//action+=Action
		public Assignment getActionAssignment_3_2() { return cActionAssignment_3_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_2_0() { return cActionActionParserRuleCall_3_2_0; }
	}
	public class GreenhouseSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHasKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariableVariableParserRuleCall_5_0 = (RuleCall)cVariableAssignment_5.eContents().get(0);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		
		//GreenhouseSensor:
		//     'global' 'sensor' name=ID 'has' 'value' variable=Variable
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'sensor' name=ID 'has' 'value' variable=Variable
		//   states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'has'
		public Keyword getHasKeyword_3() { return cHasKeyword_3; }
		
		//'value'
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//variable=Variable
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_5_0() { return cVariableVariableParserRuleCall_5_0; }
		
		//states+=State
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//(',' states+=State)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//states+=State
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_0() { return cStatesStateParserRuleCall_7_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStatesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		
		//Sensor:
		//    'sensor' name=ID 'has' variable=Variable 'and' 'states'
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID 'has' variable=Variable 'and' 'states'
		//    states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'has'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
		
		//'and'
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//'states'
		public Keyword getStatesKeyword_5() { return cStatesKeyword_5; }
		
		//states+=State
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//(',' states+=State)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//states+=State
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_0() { return cStatesStateParserRuleCall_7_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOpAlternatives_3_0 = (Alternatives)cOpAssignment_3.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_3_0_0 = (Keyword)cOpAlternatives_3_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_3_0_1 = (Keyword)cOpAlternatives_3_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_3_0_2 = (Keyword)cOpAlternatives_3_0.eContents().get(2);
		private final Assignment cThresholdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThresholdINTTerminalRuleCall_4_0 = (RuleCall)cThresholdAssignment_4.eContents().get(0);
		
		//State:
		//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=INT
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_2_0() { return cVariableVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_0_1() { return cVariableVariableIDTerminalRuleCall_2_0_1; }
		
		//op = ('<' | '>' | '=')
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//('<' | '>' | '=')
		public Alternatives getOpAlternatives_3_0() { return cOpAlternatives_3_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_3_0_0() { return cOpLessThanSignKeyword_3_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_3_0_1() { return cOpGreaterThanSignKeyword_3_0_1; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_3_0_2() { return cOpEqualsSignKeyword_3_0_2; }
		
		//threshold=INT
		public Assignment getThresholdAssignment_4() { return cThresholdAssignment_4; }
		
		//INT
		public RuleCall getThresholdINTTerminalRuleCall_4_0() { return cThresholdINTTerminalRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    'variable' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReceivingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSettingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSettingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSettingSettingParserRuleCall_6_0 = (RuleCall)cSettingAssignment_6.eContents().get(0);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueValueParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		
		//Action:
		//    name=ID 'when' 'receiving' trigger=Trigger 'by' 'setting' setting=Setting 'to' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'when' 'receiving' trigger=Trigger 'by' 'setting' setting=Setting 'to' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'receiving'
		public Keyword getReceivingKeyword_2() { return cReceivingKeyword_2; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }
		
		//'by'
		public Keyword getByKeyword_4() { return cByKeyword_4; }
		
		//'setting'
		public Keyword getSettingKeyword_5() { return cSettingKeyword_5; }
		
		//setting=Setting
		public Assignment getSettingAssignment_6() { return cSettingAssignment_6; }
		
		//Setting
		public RuleCall getSettingSettingParserRuleCall_6_0() { return cSettingSettingParserRuleCall_6_0; }
		
		//'to'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//value=Value
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_8_0() { return cValueValueParserRuleCall_8_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Trigger:
		//    {Trigger} name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Trigger} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Setting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSettingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Setting:
		//    {Setting}
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Setting}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{Setting}
		public Action getSettingAction_0() { return cSettingAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Value:
		//    {Value}
		//    name=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value}
		//name=INT
		public Group getGroup() { return cGroup; }
		
		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
	}
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActuatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActuatorActuatorCrossReference_1_0 = (CrossReference)cActuatorAssignment_1.eContents().get(0);
		private final RuleCall cActuatorActuatorIDTerminalRuleCall_1_0_1 = (RuleCall)cActuatorActuatorCrossReference_1_0.eContents().get(1);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionIDTerminalRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSensorSensorCrossReference_5_0 = (CrossReference)cSensorAssignment_5.eContents().get(0);
		private final RuleCall cSensorSensorIDTerminalRuleCall_5_0_1 = (RuleCall)cSensorSensorCrossReference_5_0.eContents().get(1);
		private final Keyword cIsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStateIDTerminalRuleCall_7_0 = (RuleCall)cStateAssignment_7.eContents().get(0);
		
		//RuleSet:
		//    'rule' actuator=[Actuator] 'set' action=ID 'when' sensor=[Sensor] 'is' state=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' actuator=[Actuator] 'set' action=ID 'when' sensor=[Sensor] 'is' state=ID
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//actuator=[Actuator]
		public Assignment getActuatorAssignment_1() { return cActuatorAssignment_1; }
		
		//[Actuator]
		public CrossReference getActuatorActuatorCrossReference_1_0() { return cActuatorActuatorCrossReference_1_0; }
		
		//ID
		public RuleCall getActuatorActuatorIDTerminalRuleCall_1_0_1() { return cActuatorActuatorIDTerminalRuleCall_1_0_1; }
		
		//'set'
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }
		
		//action=ID
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//ID
		public RuleCall getActionIDTerminalRuleCall_3_0() { return cActionIDTerminalRuleCall_3_0; }
		
		//'when'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//sensor=[Sensor]
		public Assignment getSensorAssignment_5() { return cSensorAssignment_5; }
		
		//[Sensor]
		public CrossReference getSensorSensorCrossReference_5_0() { return cSensorSensorCrossReference_5_0; }
		
		//ID
		public RuleCall getSensorSensorIDTerminalRuleCall_5_0_1() { return cSensorSensorIDTerminalRuleCall_5_0_1; }
		
		//'is'
		public Keyword getIsKeyword_6() { return cIsKeyword_6; }
		
		//state=ID
		public Assignment getStateAssignment_7() { return cStateAssignment_7; }
		
		//ID
		public RuleCall getStateIDTerminalRuleCall_7_0() { return cStateIDTerminalRuleCall_7_0; }
	}
	public class GreenhouseRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseRuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActuatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActuatorActuatorCrossReference_1_0 = (CrossReference)cActuatorAssignment_1.eContents().get(0);
		private final RuleCall cActuatorActuatorIDTerminalRuleCall_1_0_1 = (RuleCall)cActuatorActuatorCrossReference_1_0.eContents().get(1);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionActionCrossReference_3_0 = (CrossReference)cActionAssignment_3.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_3_0_1 = (RuleCall)cActionActionCrossReference_3_0.eContents().get(1);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSensorSensorCrossReference_5_0 = (CrossReference)cSensorAssignment_5.eContents().get(0);
		private final RuleCall cSensorSensorIDTerminalRuleCall_5_0_1 = (RuleCall)cSensorSensorCrossReference_5_0.eContents().get(1);
		private final Keyword cIsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cStateStateCrossReference_7_0 = (CrossReference)cStateAssignment_7.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_7_0_1 = (RuleCall)cStateStateCrossReference_7_0.eContents().get(1);
		
		//GreenhouseRuleSet:
		//    'global rule' actuator=[Actuator] 'set' action=[Action] 'when' sensor=[Sensor] 'is' state=[State]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global rule' actuator=[Actuator] 'set' action=[Action] 'when' sensor=[Sensor] 'is' state=[State]
		public Group getGroup() { return cGroup; }
		
		//'global rule'
		public Keyword getGlobalRuleKeyword_0() { return cGlobalRuleKeyword_0; }
		
		//actuator=[Actuator]
		public Assignment getActuatorAssignment_1() { return cActuatorAssignment_1; }
		
		//[Actuator]
		public CrossReference getActuatorActuatorCrossReference_1_0() { return cActuatorActuatorCrossReference_1_0; }
		
		//ID
		public RuleCall getActuatorActuatorIDTerminalRuleCall_1_0_1() { return cActuatorActuatorIDTerminalRuleCall_1_0_1; }
		
		//'set'
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }
		
		//action=[Action]
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_3_0() { return cActionActionCrossReference_3_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_3_0_1() { return cActionActionIDTerminalRuleCall_3_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//sensor=[Sensor]
		public Assignment getSensorAssignment_5() { return cSensorAssignment_5; }
		
		//[Sensor]
		public CrossReference getSensorSensorCrossReference_5_0() { return cSensorSensorCrossReference_5_0; }
		
		//ID
		public RuleCall getSensorSensorIDTerminalRuleCall_5_0_1() { return cSensorSensorIDTerminalRuleCall_5_0_1; }
		
		//'is'
		public Keyword getIsKeyword_6() { return cIsKeyword_6; }
		
		//state=[State]
		public Assignment getStateAssignment_7() { return cStateAssignment_7; }
		
		//[State]
		public CrossReference getStateStateCrossReference_7_0() { return cStateStateCrossReference_7_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_7_0_1() { return cStateStateIDTerminalRuleCall_7_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final GreenhouseElements pGreenhouse;
	private final RowElements pRow;
	private final GreenhouseElementElements pGreenhouseElement;
	private final RowElementElements pRowElement;
	private final GreenhouseActuatorElements pGreenhouseActuator;
	private final ActuatorElements pActuator;
	private final GreenhouseSensorElements pGreenhouseSensor;
	private final SensorElements pSensor;
	private final StateElements pState;
	private final VariableElements pVariable;
	private final ActionElements pAction;
	private final TriggerElements pTrigger;
	private final SettingElements pSetting;
	private final ValueElements pValue;
	private final RuleSetElements pRuleSet;
	private final GreenhouseRuleSetElements pGreenhouseRuleSet;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreenhouseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreenhouse = new GreenhouseElements();
		this.pRow = new RowElements();
		this.pGreenhouseElement = new GreenhouseElementElements();
		this.pRowElement = new RowElementElements();
		this.pGreenhouseActuator = new GreenhouseActuatorElements();
		this.pActuator = new ActuatorElements();
		this.pGreenhouseSensor = new GreenhouseSensorElements();
		this.pSensor = new SensorElements();
		this.pState = new StateElements();
		this.pVariable = new VariableElements();
		this.pAction = new ActionElements();
		this.pTrigger = new TriggerElements();
		this.pSetting = new SettingElements();
		this.pValue = new ValueElements();
		this.pRuleSet = new RuleSetElements();
		this.pGreenhouseRuleSet = new GreenhouseRuleSetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dsl.Greenhouse".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    "system" name=ID
	//    greenhouses+=Greenhouse*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greenhouse:
	//    'greenhouse' name=ID
	//    '[' row+=Row* elements+=GreenhouseElement* ']'
	//;
	public GreenhouseElements getGreenhouseAccess() {
		return pGreenhouse;
	}
	
	public ParserRule getGreenhouseRule() {
		return getGreenhouseAccess().getRule();
	}
	
	//Row:
	//    'row' name=ID 'includes'
	//    '[' elements+=RowElement* ']'
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//GreenhouseElement:
	//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
	//;
	public GreenhouseElementElements getGreenhouseElementAccess() {
		return pGreenhouseElement;
	}
	
	public ParserRule getGreenhouseElementRule() {
		return getGreenhouseElementAccess().getRule();
	}
	
	//RowElement:
	//     Sensor |  Actuator | RuleSet
	//;
	public RowElementElements getRowElementAccess() {
		return pRowElement;
	}
	
	public ParserRule getRowElementRule() {
		return getRowElementAccess().getRule();
	}
	
	//GreenhouseActuator:
	//      'global' 'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
	//;
	public GreenhouseActuatorElements getGreenhouseActuatorAccess() {
		return pGreenhouseActuator;
	}
	
	public ParserRule getGreenhouseActuatorRule() {
		return getGreenhouseActuatorAccess().getRule();
	}
	
	//Actuator:
	//     'actuator' name=ID ('can' action+=Action)? (',' 'can' action+=Action)*
	//;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//GreenhouseSensor:
	//     'global' 'sensor' name=ID 'has' 'value' variable=Variable
	//        states+=State(',' states+=State)*
	//;
	public GreenhouseSensorElements getGreenhouseSensorAccess() {
		return pGreenhouseSensor;
	}
	
	public ParserRule getGreenhouseSensorRule() {
		return getGreenhouseSensorAccess().getRule();
	}
	
	//Sensor:
	//    'sensor' name=ID 'has' variable=Variable 'and' 'states'
	//        states+=State(',' states+=State)*
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//State:
	//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=INT
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Variable:
	//    'variable' name=ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Action:
	//    name=ID 'when' 'receiving' trigger=Trigger 'by' 'setting' setting=Setting 'to' value=Value
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Trigger:
	//    {Trigger} name=ID
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Setting:
	//    {Setting}
	//    name=ID
	//;
	public SettingElements getSettingAccess() {
		return pSetting;
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}
	
	//Value:
	//    {Value}
	//    name=INT
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//RuleSet:
	//    'rule' actuator=[Actuator] 'set' action=ID 'when' sensor=[Sensor] 'is' state=ID
	//;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//GreenhouseRuleSet:
	//    'global rule' actuator=[Actuator] 'set' action=[Action] 'when' sensor=[Sensor] 'is' state=[State]
	//;
	public GreenhouseRuleSetElements getGreenhouseRuleSetAccess() {
		return pGreenhouseRuleSet;
	}
	
	public ParserRule getGreenhouseRuleSetRule() {
		return getGreenhouseRuleSetAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
