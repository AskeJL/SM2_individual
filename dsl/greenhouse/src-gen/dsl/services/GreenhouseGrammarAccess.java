/*
 * generated by Xtext 2.25.0
 */
package dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GreenhouseGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cHardwareSetupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHardwareSetupHardwareSetupParserRuleCall_2_0 = (RuleCall)cHardwareSetupAssignment_2.eContents().get(0);
		private final Assignment cGreenhousesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGreenhousesGreenhouseParserRuleCall_3_0 = (RuleCall)cGreenhousesAssignment_3.eContents().get(0);
		
		//Model:
		//    "system" name=ID
		//    hardwareSetup+=HardwareSetup?
		//    greenhouses+=Greenhouse*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"system" name=ID
		//hardwareSetup+=HardwareSetup?
		//greenhouses+=Greenhouse*
		public Group getGroup() { return cGroup; }
		
		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//hardwareSetup+=HardwareSetup?
		public Assignment getHardwareSetupAssignment_2() { return cHardwareSetupAssignment_2; }
		
		//HardwareSetup
		public RuleCall getHardwareSetupHardwareSetupParserRuleCall_2_0() { return cHardwareSetupHardwareSetupParserRuleCall_2_0; }
		
		//greenhouses+=Greenhouse*
		public Assignment getGreenhousesAssignment_3() { return cGreenhousesAssignment_3; }
		
		//Greenhouse
		public RuleCall getGreenhousesGreenhouseParserRuleCall_3_0() { return cGreenhousesGreenhouseParserRuleCall_3_0; }
	}
	public class HardwareSetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.HardwareSetup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSettingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHardwareAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHardwareHardwareParserRuleCall_2_0 = (RuleCall)cHardwareAssignment_2.eContents().get(0);
		
		//HardwareSetup:
		//    {Setting}
		//    'configuration'
		//    hardware+=Hardware*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Setting}
		//'configuration'
		//hardware+=Hardware*
		public Group getGroup() { return cGroup; }
		
		//{Setting}
		public Action getSettingAction_0() { return cSettingAction_0; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//hardware+=Hardware*
		public Assignment getHardwareAssignment_2() { return cHardwareAssignment_2; }
		
		//Hardware
		public RuleCall getHardwareHardwareParserRuleCall_2_0() { return cHardwareHardwareParserRuleCall_2_0; }
	}
	public class HardwareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Hardware");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSettingActuatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSettingSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Hardware:
		//    SettingActuator | SettingSensor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SettingActuator | SettingSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SettingActuator
		public RuleCall getSettingActuatorParserRuleCall_0() { return cSettingActuatorParserRuleCall_0; }
		
		//SettingSensor
		public RuleCall getSettingSensorParserRuleCall_1() { return cSettingSensorParserRuleCall_1; }
	}
	public class SettingActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSettingActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSettingActionSettingActionParserRuleCall_4_0 = (RuleCall)cSettingActionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAndKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSettingActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSettingActionSettingActionParserRuleCall_5_1_0 = (RuleCall)cSettingActionAssignment_5_1.eContents().get(0);
		
		//SettingActuator:
		//    'actuator' name=ID 'has' 'action' settingAction+=SettingAction ('and' settingAction+=SettingAction)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID 'has' 'action' settingAction+=SettingAction ('and' settingAction+=SettingAction)*
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'has'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//'action'
		public Keyword getActionKeyword_3() { return cActionKeyword_3; }
		
		//settingAction+=SettingAction
		public Assignment getSettingActionAssignment_4() { return cSettingActionAssignment_4; }
		
		//SettingAction
		public RuleCall getSettingActionSettingActionParserRuleCall_4_0() { return cSettingActionSettingActionParserRuleCall_4_0; }
		
		//('and' settingAction+=SettingAction)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'and'
		public Keyword getAndKeyword_5_0() { return cAndKeyword_5_0; }
		
		//settingAction+=SettingAction
		public Assignment getSettingActionAssignment_5_1() { return cSettingActionAssignment_5_1; }
		
		//SettingAction
		public RuleCall getSettingActionSettingActionParserRuleCall_5_1_0() { return cSettingActionSettingActionParserRuleCall_5_1_0; }
	}
	public class SettingSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPublishesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReducerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReducerReducerParserRuleCall_3_0 = (RuleCall)cReducerAssignment_3.eContents().get(0);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyFrequencyParserRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		
		//SettingSensor:
		//    'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'publishes'
		public Keyword getPublishesKeyword_2() { return cPublishesKeyword_2; }
		
		//reducer=Reducer?
		public Assignment getReducerAssignment_3() { return cReducerAssignment_3; }
		
		//Reducer
		public RuleCall getReducerReducerParserRuleCall_3_0() { return cReducerReducerParserRuleCall_3_0; }
		
		//frequency=Frequency
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//Frequency
		public RuleCall getFrequencyFrequencyParserRuleCall_4_0() { return cFrequencyFrequencyParserRuleCall_4_0; }
	}
	public class ReducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Reducer");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAverageKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameMedianKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//Reducer:
		//    name=('average' | 'median')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('average' | 'median')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('average' | 'median')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'average'
		public Keyword getNameAverageKeyword_0_0() { return cNameAverageKeyword_0_0; }
		
		//'median'
		public Keyword getNameMedianKeyword_0_1() { return cNameMedianKeyword_0_1; }
	}
	public class FrequencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Frequency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFreqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFreqExpParserRuleCall_0_0 = (RuleCall)cFreqAssignment_0.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSecondKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Frequency:
		//    freq=Exp 'times' 'per' 'second'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//freq=Exp 'times' 'per' 'second'
		public Group getGroup() { return cGroup; }
		
		//freq=Exp
		public Assignment getFreqAssignment_0() { return cFreqAssignment_0; }
		
		//Exp
		public RuleCall getFreqExpParserRuleCall_0_0() { return cFreqExpParserRuleCall_0_0; }
		
		//'times'
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
		
		//'per'
		public Keyword getPerKeyword_2() { return cPerKeyword_2; }
		
		//'second'
		public Keyword getSecondKeyword_3() { return cSecondKeyword_3; }
	}
	public class TopicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Topic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Topic:
		//    'topic' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'topic' name=ID
		public Group getGroup() { return cGroup; }
		
		//'topic'
		public Keyword getTopicKeyword_0() { return cTopicKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SettingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValuesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSettingValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSettingValueSettingValueParserRuleCall_3_0 = (RuleCall)cSettingValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSettingValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSettingValueSettingValueParserRuleCall_4_1_0 = (RuleCall)cSettingValueAssignment_4_1.eContents().get(0);
		
		//SettingAction:
		//    name=ID 'with' 'values' settingValue+=SettingValue (',' settingValue+=SettingValue)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'with' 'values' settingValue+=SettingValue (',' settingValue+=SettingValue)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'values'
		public Keyword getValuesKeyword_2() { return cValuesKeyword_2; }
		
		//settingValue+=SettingValue
		public Assignment getSettingValueAssignment_3() { return cSettingValueAssignment_3; }
		
		//SettingValue
		public RuleCall getSettingValueSettingValueParserRuleCall_3_0() { return cSettingValueSettingValueParserRuleCall_3_0; }
		
		//(',' settingValue+=SettingValue)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//settingValue+=SettingValue
		public Assignment getSettingValueAssignment_4_1() { return cSettingValueAssignment_4_1; }
		
		//SettingValue
		public RuleCall getSettingValueSettingValueParserRuleCall_4_1_0() { return cSettingValueSettingValueParserRuleCall_4_1_0; }
	}
	public class SettingValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.SettingValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SettingValue:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GreenhouseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Greenhouse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreenhouseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowRowParserRuleCall_2_0 = (RuleCall)cRowAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsGreenhouseElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Greenhouse:
		//    'greenhouse' name=ID
		//    row+=Row* elements+=GreenhouseElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'greenhouse' name=ID
		//row+=Row* elements+=GreenhouseElement*
		public Group getGroup() { return cGroup; }
		
		//'greenhouse'
		public Keyword getGreenhouseKeyword_0() { return cGreenhouseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//row+=Row*
		public Assignment getRowAssignment_2() { return cRowAssignment_2; }
		
		//Row
		public RuleCall getRowRowParserRuleCall_2_0() { return cRowRowParserRuleCall_2_0; }
		
		//elements+=GreenhouseElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//GreenhouseElement
		public RuleCall getElementsGreenhouseElementParserRuleCall_3_0() { return cElementsGreenhouseElementParserRuleCall_3_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsRowElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Row:
		//    'row' name=ID 'includes'
		//    elements+=RowElement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'row' name=ID 'includes'
		//elements+=RowElement*
		public Group getGroup() { return cGroup; }
		
		//'row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'includes'
		public Keyword getIncludesKeyword_2() { return cIncludesKeyword_2; }
		
		//elements+=RowElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//RowElement
		public RuleCall getElementsRowElementParserRuleCall_3_0() { return cElementsRowElementParserRuleCall_3_0; }
	}
	public class GreenhouseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGreenhouseSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreenhouseActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGreenhouseRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GreenhouseElement:
		//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreenhouseSensor
		public RuleCall getGreenhouseSensorParserRuleCall_0() { return cGreenhouseSensorParserRuleCall_0; }
		
		//GreenhouseActuator
		public RuleCall getGreenhouseActuatorParserRuleCall_1() { return cGreenhouseActuatorParserRuleCall_1; }
		
		//GreenhouseRuleSet
		public RuleCall getGreenhouseRuleSetParserRuleCall_2() { return cGreenhouseRuleSetParserRuleCall_2; }
	}
	public class RowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRowActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRowRuleSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RowElement:
		//     RowSensor |  RowActuator | RowRuleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RowSensor |  RowActuator | RowRuleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RowSensor
		public RuleCall getRowSensorParserRuleCall_0() { return cRowSensorParserRuleCall_0; }
		
		//RowActuator
		public RuleCall getRowActuatorParserRuleCall_1() { return cRowActuatorParserRuleCall_1; }
		
		//RowRuleSet
		public RuleCall getRowRuleSetParserRuleCall_2() { return cRowRuleSetParserRuleCall_2; }
	}
	public class GreenhouseActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSettingActuatorCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSettingActuatorIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeSettingActuatorCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWillKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_3_1_0 = (RuleCall)cActionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cWillKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_4_2_0 = (RuleCall)cActionAssignment_4_2.eContents().get(0);
		
		//GreenhouseActuator:
		//      'global' type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//type=[SettingActuator]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[SettingActuator]
		public CrossReference getTypeSettingActuatorCrossReference_1_0() { return cTypeSettingActuatorCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeSettingActuatorIDTerminalRuleCall_1_0_1() { return cTypeSettingActuatorIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('will' action+=Action)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'will'
		public Keyword getWillKeyword_3_0() { return cWillKeyword_3_0; }
		
		//action+=Action
		public Assignment getActionAssignment_3_1() { return cActionAssignment_3_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_1_0() { return cActionActionParserRuleCall_3_1_0; }
		
		//(',' 'will' action+=Action)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'will'
		public Keyword getWillKeyword_4_1() { return cWillKeyword_4_1; }
		
		//action+=Action
		public Assignment getActionAssignment_4_2() { return cActionAssignment_4_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_4_2_0() { return cActionActionParserRuleCall_4_2_0; }
	}
	public class RowActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSettingActuatorCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSettingActuatorIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeSettingActuatorCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWillKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_2_1_0 = (RuleCall)cActionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cWillKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cActionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_3_2_0 = (RuleCall)cActionAssignment_3_2.eContents().get(0);
		
		//RowActuator:
		//     type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
		public Group getGroup() { return cGroup; }
		
		//type=[SettingActuator]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SettingActuator]
		public CrossReference getTypeSettingActuatorCrossReference_0_0() { return cTypeSettingActuatorCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSettingActuatorIDTerminalRuleCall_0_0_1() { return cTypeSettingActuatorIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('will' action+=Action)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'will'
		public Keyword getWillKeyword_2_0() { return cWillKeyword_2_0; }
		
		//action+=Action
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_1_0() { return cActionActionParserRuleCall_2_1_0; }
		
		//(',' 'will' action+=Action)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//'will'
		public Keyword getWillKeyword_3_1() { return cWillKeyword_3_1; }
		
		//action+=Action
		public Assignment getActionAssignment_3_2() { return cActionAssignment_3_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_3_2_0() { return cActionActionParserRuleCall_3_2_0; }
	}
	public class GreenhouseSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSettingSensorCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSettingSensorIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeSettingSensorCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHasKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableVariableParserRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cStatesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_8_1_0 = (RuleCall)cStatesAssignment_8_1.eContents().get(0);
		
		//GreenhouseSensor:
		//     'global' type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
		//   states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//type=[SettingSensor]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[SettingSensor]
		public CrossReference getTypeSettingSensorCrossReference_1_0() { return cTypeSettingSensorCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeSettingSensorIDTerminalRuleCall_1_0_1() { return cTypeSettingSensorIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'has'
		public Keyword getHasKeyword_3() { return cHasKeyword_3; }
		
		//variable=Variable
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_4_0() { return cVariableVariableParserRuleCall_4_0; }
		
		//'and'
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }
		
		//'states'
		public Keyword getStatesKeyword_6() { return cStatesKeyword_6; }
		
		//states+=State
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
		
		//(',' states+=State)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//states+=State
		public Assignment getStatesAssignment_8_1() { return cStatesAssignment_8_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_8_1_0() { return cStatesStateParserRuleCall_8_1_0; }
	}
	public class RowSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSettingSensorCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeSettingSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeSettingSensorCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStatesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		
		//RowSensor:
		//    type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
		//        states+=State(',' states+=State)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
		//    states+=State(',' states+=State)*
		public Group getGroup() { return cGroup; }
		
		//type=[SettingSensor]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[SettingSensor]
		public CrossReference getTypeSettingSensorCrossReference_0_0() { return cTypeSettingSensorCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSettingSensorIDTerminalRuleCall_0_0_1() { return cTypeSettingSensorIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'has'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//variable=Variable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_3_0() { return cVariableVariableParserRuleCall_3_0; }
		
		//'and'
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//'states'
		public Keyword getStatesKeyword_5() { return cStatesKeyword_5; }
		
		//states+=State
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//(',' states+=State)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//states+=State
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_0() { return cStatesStateParserRuleCall_7_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOpAlternatives_3_0 = (Alternatives)cOpAssignment_3.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_3_0_0 = (Keyword)cOpAlternatives_3_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_3_0_1 = (Keyword)cOpAlternatives_3_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_3_0_2 = (Keyword)cOpAlternatives_3_0.eContents().get(2);
		private final Assignment cThresholdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThresholdExpParserRuleCall_4_0 = (RuleCall)cThresholdAssignment_4.eContents().get(0);
		
		//State:
		//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_2_0() { return cVariableVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_0_1() { return cVariableVariableIDTerminalRuleCall_2_0_1; }
		
		//op = ('<' | '>' | '=')
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//('<' | '>' | '=')
		public Alternatives getOpAlternatives_3_0() { return cOpAlternatives_3_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_3_0_0() { return cOpLessThanSignKeyword_3_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_3_0_1() { return cOpGreaterThanSignKeyword_3_0_1; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_3_0_2() { return cOpEqualsSignKeyword_3_0_2; }
		
		//threshold=Exp
		public Assignment getThresholdAssignment_4() { return cThresholdAssignment_4; }
		
		//Exp
		public RuleCall getThresholdExpParserRuleCall_4_0() { return cThresholdExpParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    'variable' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueSettingValueCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueSettingValueIDTerminalRuleCall_1_0_1 = (RuleCall)cValueSettingValueCrossReference_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReceivingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerTriggerParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		
		//Action:
		//    name=ID value=[SettingValue] 'when' 'receiving' trigger=Trigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=[SettingValue] 'when' 'receiving' trigger=Trigger
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=[SettingValue]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[SettingValue]
		public CrossReference getValueSettingValueCrossReference_1_0() { return cValueSettingValueCrossReference_1_0; }
		
		//ID
		public RuleCall getValueSettingValueIDTerminalRuleCall_1_0_1() { return cValueSettingValueIDTerminalRuleCall_1_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }
		
		//'receiving'
		public Keyword getReceivingKeyword_3() { return cReceivingKeyword_3; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_4_0() { return cTriggerTriggerParserRuleCall_4_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Trigger:
		//    {Trigger} name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Trigger} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RowRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.RowRuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTriggerTriggerCrossReference_2_0 = (CrossReference)cTriggerAssignment_2.eContents().get(0);
		private final RuleCall cTriggerTriggerIDTerminalRuleCall_2_0_1 = (RuleCall)cTriggerTriggerCrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActuatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cActuatorRowActuatorCrossReference_4_0 = (CrossReference)cActuatorAssignment_4.eContents().get(0);
		private final RuleCall cActuatorRowActuatorIDTerminalRuleCall_4_0_1 = (RuleCall)cActuatorRowActuatorCrossReference_4_0.eContents().get(1);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSensorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSensorRowSensorCrossReference_6_0 = (CrossReference)cSensorAssignment_6.eContents().get(0);
		private final RuleCall cSensorRowSensorIDTerminalRuleCall_6_0_1 = (RuleCall)cSensorRowSensorCrossReference_6_0.eContents().get(1);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cStateStateCrossReference_8_0 = (CrossReference)cStateAssignment_8.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_8_0_1 = (RuleCall)cStateStateCrossReference_8_0.eContents().get(1);
		
		//RowRuleSet:
		//    'rule' 'trigger' trigger=[Trigger] 'on' Actuator=[RowActuator] 'when' sensor=[RowSensor] 'is' state=[State]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' 'trigger' trigger=[Trigger] 'on' Actuator=[RowActuator] 'when' sensor=[RowSensor] 'is' state=[State]
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }
		
		//trigger=[Trigger]
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }
		
		//[Trigger]
		public CrossReference getTriggerTriggerCrossReference_2_0() { return cTriggerTriggerCrossReference_2_0; }
		
		//ID
		public RuleCall getTriggerTriggerIDTerminalRuleCall_2_0_1() { return cTriggerTriggerIDTerminalRuleCall_2_0_1; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//Actuator=[RowActuator]
		public Assignment getActuatorAssignment_4() { return cActuatorAssignment_4; }
		
		//[RowActuator]
		public CrossReference getActuatorRowActuatorCrossReference_4_0() { return cActuatorRowActuatorCrossReference_4_0; }
		
		//ID
		public RuleCall getActuatorRowActuatorIDTerminalRuleCall_4_0_1() { return cActuatorRowActuatorIDTerminalRuleCall_4_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//sensor=[RowSensor]
		public Assignment getSensorAssignment_6() { return cSensorAssignment_6; }
		
		//[RowSensor]
		public CrossReference getSensorRowSensorCrossReference_6_0() { return cSensorRowSensorCrossReference_6_0; }
		
		//ID
		public RuleCall getSensorRowSensorIDTerminalRuleCall_6_0_1() { return cSensorRowSensorIDTerminalRuleCall_6_0_1; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//state=[State]
		public Assignment getStateAssignment_8() { return cStateAssignment_8; }
		
		//[State]
		public CrossReference getStateStateCrossReference_8_0() { return cStateStateCrossReference_8_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_8_0_1() { return cStateStateIDTerminalRuleCall_8_0_1; }
	}
	public class GreenhouseRuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.GreenhouseRuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActuatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActuatorGreenhouseCrossReference_2_0 = (CrossReference)cActuatorAssignment_2.eContents().get(0);
		private final RuleCall cActuatorGreenhouseIDTerminalRuleCall_2_0_1 = (RuleCall)cActuatorGreenhouseCrossReference_2_0.eContents().get(1);
		private final Keyword cSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cActionActionCrossReference_4_0 = (CrossReference)cActionAssignment_4.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_4_0_1 = (RuleCall)cActionActionCrossReference_4_0.eContents().get(1);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSensorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSensorGreenhouseSensorCrossReference_6_0 = (CrossReference)cSensorAssignment_6.eContents().get(0);
		private final RuleCall cSensorGreenhouseSensorIDTerminalRuleCall_6_0_1 = (RuleCall)cSensorGreenhouseSensorCrossReference_6_0.eContents().get(1);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cStateStateCrossReference_8_0 = (CrossReference)cStateAssignment_8.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_8_0_1 = (RuleCall)cStateStateCrossReference_8_0.eContents().get(1);
		
		//GreenhouseRuleSet:
		//    'global' 'rule' actuator=[Greenhouse] 'set' action=[Action] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'rule' actuator=[Greenhouse] 'set' action=[Action] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//actuator=[Greenhouse]
		public Assignment getActuatorAssignment_2() { return cActuatorAssignment_2; }
		
		//[Greenhouse]
		public CrossReference getActuatorGreenhouseCrossReference_2_0() { return cActuatorGreenhouseCrossReference_2_0; }
		
		//ID
		public RuleCall getActuatorGreenhouseIDTerminalRuleCall_2_0_1() { return cActuatorGreenhouseIDTerminalRuleCall_2_0_1; }
		
		//'set'
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }
		
		//action=[Action]
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//[Action]
		public CrossReference getActionActionCrossReference_4_0() { return cActionActionCrossReference_4_0; }
		
		//ID
		public RuleCall getActionActionIDTerminalRuleCall_4_0_1() { return cActionActionIDTerminalRuleCall_4_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//sensor=[GreenhouseSensor]
		public Assignment getSensorAssignment_6() { return cSensorAssignment_6; }
		
		//[GreenhouseSensor]
		public CrossReference getSensorGreenhouseSensorCrossReference_6_0() { return cSensorGreenhouseSensorCrossReference_6_0; }
		
		//ID
		public RuleCall getSensorGreenhouseSensorIDTerminalRuleCall_6_0_1() { return cSensorGreenhouseSensorIDTerminalRuleCall_6_0_1; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//state=[State]
		public Assignment getStateAssignment_8() { return cStateAssignment_8; }
		
		//[State]
		public CrossReference getStateStateCrossReference_8_0() { return cStateStateCrossReference_8_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_8_0_1() { return cStateStateIDTerminalRuleCall_8_0_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dsl.Greenhouse.Primary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMathNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Primary returns Expression:
		//    {MathNumber} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MathNumber} value=INT
		public Group getGroup() { return cGroup; }
		
		//{MathNumber}
		public Action getMathNumberAction_0() { return cMathNumberAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final HardwareSetupElements pHardwareSetup;
	private final HardwareElements pHardware;
	private final SettingActuatorElements pSettingActuator;
	private final SettingSensorElements pSettingSensor;
	private final ReducerElements pReducer;
	private final FrequencyElements pFrequency;
	private final TopicElements pTopic;
	private final SettingActionElements pSettingAction;
	private final SettingValueElements pSettingValue;
	private final GreenhouseElements pGreenhouse;
	private final RowElements pRow;
	private final GreenhouseElementElements pGreenhouseElement;
	private final RowElementElements pRowElement;
	private final GreenhouseActuatorElements pGreenhouseActuator;
	private final RowActuatorElements pRowActuator;
	private final GreenhouseSensorElements pGreenhouseSensor;
	private final RowSensorElements pRowSensor;
	private final StateElements pState;
	private final VariableElements pVariable;
	private final ActionElements pAction;
	private final TriggerElements pTrigger;
	private final RowRuleSetElements pRowRuleSet;
	private final GreenhouseRuleSetElements pGreenhouseRuleSet;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreenhouseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHardwareSetup = new HardwareSetupElements();
		this.pHardware = new HardwareElements();
		this.pSettingActuator = new SettingActuatorElements();
		this.pSettingSensor = new SettingSensorElements();
		this.pReducer = new ReducerElements();
		this.pFrequency = new FrequencyElements();
		this.pTopic = new TopicElements();
		this.pSettingAction = new SettingActionElements();
		this.pSettingValue = new SettingValueElements();
		this.pGreenhouse = new GreenhouseElements();
		this.pRow = new RowElements();
		this.pGreenhouseElement = new GreenhouseElementElements();
		this.pRowElement = new RowElementElements();
		this.pGreenhouseActuator = new GreenhouseActuatorElements();
		this.pRowActuator = new RowActuatorElements();
		this.pGreenhouseSensor = new GreenhouseSensorElements();
		this.pRowSensor = new RowSensorElements();
		this.pState = new StateElements();
		this.pVariable = new VariableElements();
		this.pAction = new ActionElements();
		this.pTrigger = new TriggerElements();
		this.pRowRuleSet = new RowRuleSetElements();
		this.pGreenhouseRuleSet = new GreenhouseRuleSetElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dsl.Greenhouse".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    "system" name=ID
	//    hardwareSetup+=HardwareSetup?
	//    greenhouses+=Greenhouse*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//HardwareSetup:
	//    {Setting}
	//    'configuration'
	//    hardware+=Hardware*
	//;
	public HardwareSetupElements getHardwareSetupAccess() {
		return pHardwareSetup;
	}
	
	public ParserRule getHardwareSetupRule() {
		return getHardwareSetupAccess().getRule();
	}
	
	//Hardware:
	//    SettingActuator | SettingSensor
	//;
	public HardwareElements getHardwareAccess() {
		return pHardware;
	}
	
	public ParserRule getHardwareRule() {
		return getHardwareAccess().getRule();
	}
	
	//SettingActuator:
	//    'actuator' name=ID 'has' 'action' settingAction+=SettingAction ('and' settingAction+=SettingAction)*
	//;
	public SettingActuatorElements getSettingActuatorAccess() {
		return pSettingActuator;
	}
	
	public ParserRule getSettingActuatorRule() {
		return getSettingActuatorAccess().getRule();
	}
	
	//SettingSensor:
	//    'sensor' name=ID 'publishes' reducer=Reducer? frequency=Frequency
	//;
	public SettingSensorElements getSettingSensorAccess() {
		return pSettingSensor;
	}
	
	public ParserRule getSettingSensorRule() {
		return getSettingSensorAccess().getRule();
	}
	
	//Reducer:
	//    name=('average' | 'median')
	//;
	public ReducerElements getReducerAccess() {
		return pReducer;
	}
	
	public ParserRule getReducerRule() {
		return getReducerAccess().getRule();
	}
	
	//Frequency:
	//    freq=Exp 'times' 'per' 'second'
	//;
	public FrequencyElements getFrequencyAccess() {
		return pFrequency;
	}
	
	public ParserRule getFrequencyRule() {
		return getFrequencyAccess().getRule();
	}
	
	//Topic:
	//    'topic' name=ID
	//;
	public TopicElements getTopicAccess() {
		return pTopic;
	}
	
	public ParserRule getTopicRule() {
		return getTopicAccess().getRule();
	}
	
	//SettingAction:
	//    name=ID 'with' 'values' settingValue+=SettingValue (',' settingValue+=SettingValue)*
	//;
	public SettingActionElements getSettingActionAccess() {
		return pSettingAction;
	}
	
	public ParserRule getSettingActionRule() {
		return getSettingActionAccess().getRule();
	}
	
	//SettingValue:
	//    name=ID
	//;
	public SettingValueElements getSettingValueAccess() {
		return pSettingValue;
	}
	
	public ParserRule getSettingValueRule() {
		return getSettingValueAccess().getRule();
	}
	
	//Greenhouse:
	//    'greenhouse' name=ID
	//    row+=Row* elements+=GreenhouseElement*
	//;
	public GreenhouseElements getGreenhouseAccess() {
		return pGreenhouse;
	}
	
	public ParserRule getGreenhouseRule() {
		return getGreenhouseAccess().getRule();
	}
	
	//Row:
	//    'row' name=ID 'includes'
	//    elements+=RowElement*
	//;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//GreenhouseElement:
	//     GreenhouseSensor |  GreenhouseActuator |  GreenhouseRuleSet
	//;
	public GreenhouseElementElements getGreenhouseElementAccess() {
		return pGreenhouseElement;
	}
	
	public ParserRule getGreenhouseElementRule() {
		return getGreenhouseElementAccess().getRule();
	}
	
	//RowElement:
	//     RowSensor |  RowActuator | RowRuleSet
	//;
	public RowElementElements getRowElementAccess() {
		return pRowElement;
	}
	
	public ParserRule getRowElementRule() {
		return getRowElementAccess().getRule();
	}
	
	//GreenhouseActuator:
	//      'global' type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
	//;
	public GreenhouseActuatorElements getGreenhouseActuatorAccess() {
		return pGreenhouseActuator;
	}
	
	public ParserRule getGreenhouseActuatorRule() {
		return getGreenhouseActuatorAccess().getRule();
	}
	
	//RowActuator:
	//     type=[SettingActuator] name=ID ('will' action+=Action)? (',' 'will' action+=Action)*
	//;
	public RowActuatorElements getRowActuatorAccess() {
		return pRowActuator;
	}
	
	public ParserRule getRowActuatorRule() {
		return getRowActuatorAccess().getRule();
	}
	
	//GreenhouseSensor:
	//     'global' type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
	//        states+=State(',' states+=State)*
	//;
	public GreenhouseSensorElements getGreenhouseSensorAccess() {
		return pGreenhouseSensor;
	}
	
	public ParserRule getGreenhouseSensorRule() {
		return getGreenhouseSensorAccess().getRule();
	}
	
	//RowSensor:
	//    type=[SettingSensor] name=ID 'has' variable=Variable 'and' 'states'
	//        states+=State(',' states+=State)*
	//;
	public RowSensorElements getRowSensorAccess() {
		return pRowSensor;
	}
	
	public ParserRule getRowSensorRule() {
		return getRowSensorAccess().getRule();
	}
	
	//State:
	//    name=ID 'when' variable=[Variable] op = ('<' | '>' | '=') threshold=Exp
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Variable:
	//    'variable' name=ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Action:
	//    name=ID value=[SettingValue] 'when' 'receiving' trigger=Trigger
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Trigger:
	//    {Trigger} name=ID
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//RowRuleSet:
	//    'rule' 'trigger' trigger=[Trigger] 'on' Actuator=[RowActuator] 'when' sensor=[RowSensor] 'is' state=[State]
	//;
	public RowRuleSetElements getRowRuleSetAccess() {
		return pRowRuleSet;
	}
	
	public ParserRule getRowRuleSetRule() {
		return getRowRuleSetAccess().getRule();
	}
	
	//GreenhouseRuleSet:
	//    'global' 'rule' actuator=[Greenhouse] 'set' action=[Action] 'when' sensor=[GreenhouseSensor] 'is' state=[State]
	//;
	public GreenhouseRuleSetElements getGreenhouseRuleSetAccess() {
		return pGreenhouseRuleSet;
	}
	
	public ParserRule getGreenhouseRuleSetRule() {
		return getGreenhouseRuleSetAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary returns Expression:
	//    {MathNumber} value=INT
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
