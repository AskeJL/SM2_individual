/*
 * generated by Xtext 2.25.0
 */
package dsl.serializer;

import com.google.inject.Inject;
import dsl.greenhouse.Condition;
import dsl.greenhouse.Greenhouse;
import dsl.greenhouse.GreenhouseActuator;
import dsl.greenhouse.GreenhousePackage;
import dsl.greenhouse.GreenhouseRuleSet;
import dsl.greenhouse.GreenhouseSensor;
import dsl.greenhouse.Model;
import dsl.greenhouse.Row;
import dsl.greenhouse.RowActuator;
import dsl.greenhouse.RowRuleSet;
import dsl.greenhouse.RowSensor;
import dsl.greenhouse.Setting;
import dsl.greenhouse.SettingAction;
import dsl.greenhouse.SettingActuator;
import dsl.greenhouse.SettingSensor;
import dsl.greenhouse.SettingValue;
import dsl.greenhouse.State;
import dsl.greenhouse.Topic;
import dsl.greenhouse.Trigger;
import dsl.greenhouse.Value;
import dsl.greenhouse.Variable;
import dsl.services.GreenhouseGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GreenhouseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GreenhouseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GreenhousePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GreenhousePackage.ACTION:
				sequence_Action(context, (dsl.greenhouse.Action) semanticObject); 
				return; 
			case GreenhousePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GreenhousePackage.GREENHOUSE:
				sequence_Greenhouse(context, (Greenhouse) semanticObject); 
				return; 
			case GreenhousePackage.GREENHOUSE_ACTUATOR:
				sequence_GreenhouseActuator(context, (GreenhouseActuator) semanticObject); 
				return; 
			case GreenhousePackage.GREENHOUSE_RULE_SET:
				sequence_GreenhouseRuleSet(context, (GreenhouseRuleSet) semanticObject); 
				return; 
			case GreenhousePackage.GREENHOUSE_SENSOR:
				sequence_GreenhouseSensor(context, (GreenhouseSensor) semanticObject); 
				return; 
			case GreenhousePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GreenhousePackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			case GreenhousePackage.ROW_ACTUATOR:
				sequence_RowActuator(context, (RowActuator) semanticObject); 
				return; 
			case GreenhousePackage.ROW_RULE_SET:
				sequence_RowRuleSet(context, (RowRuleSet) semanticObject); 
				return; 
			case GreenhousePackage.ROW_SENSOR:
				sequence_RowSensor(context, (RowSensor) semanticObject); 
				return; 
			case GreenhousePackage.SETTING:
				sequence_HardwareSetup(context, (Setting) semanticObject); 
				return; 
			case GreenhousePackage.SETTING_ACTION:
				sequence_SettingAction(context, (SettingAction) semanticObject); 
				return; 
			case GreenhousePackage.SETTING_ACTUATOR:
				sequence_SettingActuator(context, (SettingActuator) semanticObject); 
				return; 
			case GreenhousePackage.SETTING_SENSOR:
				sequence_SettingSensor(context, (SettingSensor) semanticObject); 
				return; 
			case GreenhousePackage.SETTING_VALUE:
				sequence_SettingValue(context, (SettingValue) semanticObject); 
				return; 
			case GreenhousePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case GreenhousePackage.TOPIC:
				sequence_Topic(context, (Topic) semanticObject); 
				return; 
			case GreenhousePackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			case GreenhousePackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case GreenhousePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID value=[SettingValue|ID] trigger=Trigger)
	 */
	protected void sequence_Action(ISerializationContext context, dsl.greenhouse.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ACTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ACTION__VALUE));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ACTION__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ACTION__TRIGGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActionAccess().getValueSettingValueIDTerminalRuleCall_1_0_1(), semanticObject.eGet(GreenhousePackage.Literals.ACTION__VALUE, false));
		feeder.accept(grammarAccess.getActionAccess().getTriggerTriggerParserRuleCall_4_0(), semanticObject.getTrigger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.CONDITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.CONDITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GreenhouseElement returns GreenhouseActuator
	 *     GreenhouseActuator returns GreenhouseActuator
	 *
	 * Constraint:
	 *     (name=ID action+=Action? action+=Action*)
	 */
	protected void sequence_GreenhouseActuator(ISerializationContext context, GreenhouseActuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GreenhouseElement returns GreenhouseRuleSet
	 *     GreenhouseRuleSet returns GreenhouseRuleSet
	 *
	 * Constraint:
	 *     (Actuator=[GreenhouseActuator|ID] action=[Action|ID] sensor=[GreenhouseSensor|ID] state=[State|ID])
	 */
	protected void sequence_GreenhouseRuleSet(ISerializationContext context, GreenhouseRuleSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTION));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__SENSOR));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.GREENHOUSE_RULE_SET__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreenhouseRuleSetAccess().getActuatorGreenhouseActuatorIDTerminalRuleCall_2_0_1(), semanticObject.eGet(GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTUATOR, false));
		feeder.accept(grammarAccess.getGreenhouseRuleSetAccess().getActionActionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(GreenhousePackage.Literals.GREENHOUSE_RULE_SET__ACTION, false));
		feeder.accept(grammarAccess.getGreenhouseRuleSetAccess().getSensorGreenhouseSensorIDTerminalRuleCall_6_0_1(), semanticObject.eGet(GreenhousePackage.Literals.GREENHOUSE_RULE_SET__SENSOR, false));
		feeder.accept(grammarAccess.getGreenhouseRuleSetAccess().getStateStateIDTerminalRuleCall_8_0_1(), semanticObject.eGet(GreenhousePackage.Literals.GREENHOUSE_RULE_SET__STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GreenhouseElement returns GreenhouseSensor
	 *     GreenhouseSensor returns GreenhouseSensor
	 *
	 * Constraint:
	 *     (name=ID variable=Variable states+=State states+=State*)
	 */
	protected void sequence_GreenhouseSensor(ISerializationContext context, GreenhouseSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Greenhouse returns Greenhouse
	 *
	 * Constraint:
	 *     (name=ID row+=Row* elements+=GreenhouseElement*)
	 */
	protected void sequence_Greenhouse(ISerializationContext context, Greenhouse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HardwareSetup returns Setting
	 *
	 * Constraint:
	 *     hardware+=Hardware*
	 */
	protected void sequence_HardwareSetup(ISerializationContext context, Setting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID hardwareSetup+=HardwareSetup? greenhouses+=Greenhouse*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RowElement returns RowActuator
	 *     RowActuator returns RowActuator
	 *
	 * Constraint:
	 *     (type=[SettingActuator|ID] name=ID action+=Action? action+=Action*)
	 */
	protected void sequence_RowActuator(ISerializationContext context, RowActuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RowElement returns RowRuleSet
	 *     RowRuleSet returns RowRuleSet
	 *
	 * Constraint:
	 *     (trigger=[Trigger|ID] Actuator=[RowActuator|ID] sensor=[RowSensor|ID] state=[State|ID])
	 */
	protected void sequence_RowRuleSet(ISerializationContext context, RowRuleSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__TRIGGER));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__SENSOR));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.ROW_RULE_SET__STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRowRuleSetAccess().getTriggerTriggerIDTerminalRuleCall_2_0_1(), semanticObject.eGet(GreenhousePackage.Literals.ROW_RULE_SET__TRIGGER, false));
		feeder.accept(grammarAccess.getRowRuleSetAccess().getActuatorRowActuatorIDTerminalRuleCall_4_0_1(), semanticObject.eGet(GreenhousePackage.Literals.ROW_RULE_SET__ACTUATOR, false));
		feeder.accept(grammarAccess.getRowRuleSetAccess().getSensorRowSensorIDTerminalRuleCall_6_0_1(), semanticObject.eGet(GreenhousePackage.Literals.ROW_RULE_SET__SENSOR, false));
		feeder.accept(grammarAccess.getRowRuleSetAccess().getStateStateIDTerminalRuleCall_8_0_1(), semanticObject.eGet(GreenhousePackage.Literals.ROW_RULE_SET__STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RowElement returns RowSensor
	 *     RowSensor returns RowSensor
	 *
	 * Constraint:
	 *     (name=ID variable=Variable states+=State states+=State*)
	 */
	protected void sequence_RowSensor(ISerializationContext context, RowSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Row returns Row
	 *
	 * Constraint:
	 *     (name=ID elements+=RowElement*)
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SettingAction returns SettingAction
	 *
	 * Constraint:
	 *     (name=ID settingValue+=SettingValue settingValue+=SettingValue*)
	 */
	protected void sequence_SettingAction(ISerializationContext context, SettingAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Hardware returns SettingActuator
	 *     SettingActuator returns SettingActuator
	 *
	 * Constraint:
	 *     (name=ID settingAction+=SettingAction settingAction+=SettingAction* topic=Topic)
	 */
	protected void sequence_SettingActuator(ISerializationContext context, SettingActuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Hardware returns SettingSensor
	 *     SettingSensor returns SettingSensor
	 *
	 * Constraint:
	 *     (name=ID topic=Topic)
	 */
	protected void sequence_SettingSensor(ISerializationContext context, SettingSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.HARDWARE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.HARDWARE__NAME));
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.HARDWARE__TOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.HARDWARE__TOPIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSettingSensorAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSettingSensorAccess().getTopicTopicParserRuleCall_4_0(), semanticObject.getTopic());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SettingValue returns SettingValue
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SettingValue(ISerializationContext context, SettingValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.SETTING_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.SETTING_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSettingValueAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID variable=[Variable|ID] (op='<' | op='>' | op='=') threshold=INT)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Topic returns Topic
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Topic(ISerializationContext context, Topic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.TOPIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.TOPIC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTopicAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueAccess().getNameINTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GreenhousePackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GreenhousePackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
