/**
 * generated by Xtext 2.25.0
 */
package dsl.generator;

import com.google.common.collect.Iterators;
import dsl.greenhouse.Model;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GreenhouseGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    String _name = model.getName();
    String _plus = ("math_expression/" + _name);
    String _plus_1 = (_plus + ".java");
    fsa.generateFile(_plus_1, this.compile(model));
  }
  
  public CharSequence compile(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("from paho.mqtt import client as mqtt_client");
    _builder.newLine();
    _builder.newLine();
    _builder.append("broker = \'localhost\'");
    _builder.newLine();
    _builder.append("port = 1883");
    _builder.newLine();
    _builder.append("topic1 = \"temp\"");
    _builder.newLine();
    _builder.append("topic2 = \"humidity\"");
    _builder.newLine();
    _builder.append("topic3 = \"co2\"");
    _builder.newLine();
    _builder.append("pubTopic = \"actuators\"");
    _builder.newLine();
    _builder.append("client_id = \'python-mqtt-rulechecker\'");
    _builder.newLine();
    _builder.append("username = \'my_user\'");
    _builder.newLine();
    _builder.append("password = \'bendevictor\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def connect_mqtt() -> mqtt_client:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def on_connect(client, userdata, flags, rc):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if rc == 0:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\"Connected to MQTT Broker!\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\"Failed to connect, return code %d\\n\", rc)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client = mqtt_client.Client(client_id)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.username_pw_set(username, password)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.on_connect = on_connect");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.connect(broker, port)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return client");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def subscribe(client: mqtt_client, topic):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def on_message(client, userdata, msg):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(f\"Received `{msg.payload.decode()}` from `{msg.topic}` topic\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ruleCheck(msg.payload.decode(), msg.topic, client)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.subscribe(topic)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.on_message = on_message");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def publish(client, message):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("msg = message");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result = client.publish(pubTopic, msg)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# result: [0, 1]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("status = result[0]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if status == 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(f\"Send `{msg}` to topic `{pubTopic}`\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(f\"Failed to send message to topic {pubTopic}\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("def ruleCheck(value, topic, client):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if topic == \"temp\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if value > 25:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"fan\", \"open\"])");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"fan\", \"close\"])");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif topic == \"humidity\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if value > 30:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"dehumidifyer\", \"open\"])");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"dehumidifyer\", \"close\"])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif topic == \"co2\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if value > 1200:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"window\", \"open\"])");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("publish(client, [\"window\", \"close\"])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def run():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client = connect_mqtt()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, topic1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, topic2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, topic3)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.loop_forever()");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("if __name__ == \'__main__\':");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("run()");
    _builder.newLine();
    return _builder;
  }
}
