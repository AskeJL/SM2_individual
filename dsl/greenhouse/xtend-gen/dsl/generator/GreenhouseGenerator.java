/**
 * generated by Xtext 2.25.0
 */
package dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dsl.greenhouse.Action;
import dsl.greenhouse.Div;
import dsl.greenhouse.Expression;
import dsl.greenhouse.Greenhouse;
import dsl.greenhouse.GreenhouseActuator;
import dsl.greenhouse.GreenhouseRuleSet;
import dsl.greenhouse.GreenhouseSensor;
import dsl.greenhouse.MathNumber;
import dsl.greenhouse.Minus;
import dsl.greenhouse.Model;
import dsl.greenhouse.Mult;
import dsl.greenhouse.Plus;
import dsl.greenhouse.Row;
import dsl.greenhouse.RowActuator;
import dsl.greenhouse.RowRuleSet;
import dsl.greenhouse.RowSensor;
import dsl.greenhouse.State;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GreenhouseGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    String _name = model.getName();
    String _plus = ("controller/" + _name);
    String _plus_1 = (_plus + ".py");
    fsa.generateFile(_plus_1, this.compileController(model));
    String _name_1 = model.getName();
    String _plus_2 = ("peripheral/" + _name_1);
    String _plus_3 = (_plus_2 + ".java");
    fsa.generateFile(_plus_3, this.compilePeripheral(model));
    String _name_2 = model.getName();
    String _plus_4 = ("verification/" + _name_2);
    String _plus_5 = (_plus_4 + ".xta");
    fsa.generateFile(_plus_5, this.compileVerification(model));
  }
  
  public CharSequence compileController(final Model model) {
    CharSequence _xblockexpression = null;
    {
      final EObject root = EcoreUtil2.getRootContainer(model);
      final List<RowSensor> allRowSensors = EcoreUtil2.<RowSensor>getAllContentsOfType(root, RowSensor.class);
      final List<GreenhouseSensor> allGreenhouseSensors = EcoreUtil2.<GreenhouseSensor>getAllContentsOfType(root, GreenhouseSensor.class);
      final List<RowRuleSet> allRowRuleset = EcoreUtil2.<RowRuleSet>getAllContentsOfType(root, RowRuleSet.class);
      final List<GreenhouseRuleSet> allGreenhouseRuleset = EcoreUtil2.<GreenhouseRuleSet>getAllContentsOfType(root, GreenhouseRuleSet.class);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("from paho.mqtt import client as mqtt_client");
      _builder.newLine();
      _builder.append("class Sensor:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("currentState = \"\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def __init__(self, name, states, variable, actuator):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.name = name");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.states = states");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.variable = variable");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.actuator = actuator");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def updateSensor(self, variable, client):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.variable = variable");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ruleCheck(variable, self, client, self.states)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def updateSensorState(self, state, client):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("theKey = next(iter(state))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("self.currentState = theKey");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("publish(client, self.actuator, state.get(self.currentState))");
      _builder.newLine();
      _builder.newLine();
      _builder.append("broker = \'localhost\'");
      _builder.newLine();
      _builder.append("port = 1883");
      _builder.newLine();
      _builder.append("client_id = \'python-mqtt-controller\'");
      _builder.newLine();
      _builder.append("username = \'my_user\'");
      _builder.newLine();
      _builder.append("password = \'bendevictor\'");
      _builder.newLine();
      _builder.append("manual = 0");
      _builder.newLine();
      _builder.append("sensors = []");
      _builder.newLine();
      _builder.append("def connect_mqtt() -> mqtt_client:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def on_connect(client, userdata, flags, rc):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if rc == 0:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(\"Connected to MQTT Broker!\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(\"Failed to connect, return code %d\\n\", rc)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client = mqtt_client.Client(client_id)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client.username_pw_set(username, password)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client.on_connect = on_connect");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client.connect(broker, port)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return client");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("def subscribe(client: mqtt_client, sensor):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def on_message(client, userdata, msg):");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(f\"Received `{msg.payload.decode()}` from `{msg.topic}` topic\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for s in sensors:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if s.name == msg.topic:");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("s.updateSensor(msg.payload.decode(), client)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client.subscribe(sensor.name)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client.on_message = on_message");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def publish(client,topic, message):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("msg = message");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if manual == 0:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("result = client.publish(topic, msg)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("# result: [0, 1]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("status = result[0]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if status == 0:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(f\"Send `{msg}` to topic `{topic}`\")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else:");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("print(f\"Failed to send message to topic {topic}\")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("def ruleCheck(value, sensor, client,states):");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if sensor.name == \"manual\":");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("global manual ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("manual = int(value)");
      _builder.newLine();
      {
        for(final RowSensor sensor : allRowSensors) {
          _builder.append("\t");
          _builder.append("if sensor.name == \"");
          EObject _eContainer = sensor.eContainer().eContainer();
          String _name = ((Greenhouse) _eContainer).getName();
          _builder.append(_name, "\t");
          _builder.append("/");
          EObject _eContainer_1 = sensor.eContainer();
          String _name_1 = ((Row) _eContainer_1).getName();
          _builder.append(_name_1, "\t");
          _builder.append("/");
          String _name_2 = sensor.getName();
          _builder.append(_name_2, "\t");
          _builder.append("\":");
          _builder.newLineIfNotEmpty();
          {
            EList<State> _states = sensor.getStates();
            for(final State state : _states) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("if float(value) ");
              String _op = state.getOp();
              _builder.append(_op, "\t\t");
              _builder.append(" ");
              String _computeExpression = GreenhouseGenerator.computeExpression(state.getThreshold());
              _builder.append(_computeExpression, "\t\t");
              _builder.append(":");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("sensor.updateSensorState(states[");
              int _indexOf = sensor.getStates().indexOf(state);
              _builder.append(_indexOf, "\t\t\t");
              _builder.append("],client)");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      {
        for(final GreenhouseSensor sensor_1 : allGreenhouseSensors) {
          _builder.append("\t");
          _builder.append("if sensor.name == \"");
          EObject _eContainer_2 = sensor_1.eContainer();
          String _name_3 = ((Greenhouse) _eContainer_2).getName();
          _builder.append(_name_3, "\t");
          _builder.append("/");
          String _name_4 = sensor_1.getName();
          _builder.append(_name_4, "\t");
          _builder.append("\":");
          _builder.newLineIfNotEmpty();
          {
            EList<State> _states_1 = sensor_1.getStates();
            for(final State state_1 : _states_1) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("if float(value) ");
              String _op_1 = state_1.getOp();
              _builder.append(_op_1, "\t\t");
              _builder.append(" ");
              String _computeExpression_1 = GreenhouseGenerator.computeExpression(state_1.getThreshold());
              _builder.append(_computeExpression_1, "\t\t");
              _builder.append(":");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("sensor.updateSensorState(states[");
              int _indexOf_1 = sensor_1.getStates().indexOf(state_1);
              _builder.append(_indexOf_1, "\t\t\t");
              _builder.append("],client)");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("return");
      _builder.newLine();
      _builder.newLine();
      _builder.append("def run():");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("client = connect_mqtt()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("manualState = Sensor(\"manual\", None, 0, None)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("sensors.append(manualState)");
      _builder.newLine();
      {
        for(final RowSensor sensor_2 : allRowSensors) {
          _builder.append("\t");
          _builder.append("sr");
          int _indexOf_2 = allRowSensors.indexOf(sensor_2);
          _builder.append(_indexOf_2, "\t");
          _builder.append(" = Sensor(\"");
          EObject _eContainer_3 = sensor_2.eContainer().eContainer();
          String _name_5 = ((Greenhouse) _eContainer_3).getName();
          _builder.append(_name_5, "\t");
          _builder.append("/");
          EObject _eContainer_4 = sensor_2.eContainer();
          String _name_6 = ((Row) _eContainer_4).getName();
          _builder.append(_name_6, "\t");
          _builder.append("/");
          String _name_7 = sensor_2.getName();
          _builder.append(_name_7, "\t");
          _builder.append("\",[");
          {
            EList<State> _states_2 = sensor_2.getStates();
            for(final State state_2 : _states_2) {
              _builder.append("{\"");
              String _name_8 = state_2.getName();
              _builder.append(_name_8, "\t");
              _builder.append("\":\"");
              {
                for(final RowRuleSet rule : allRowRuleset) {
                  {
                    if ((Objects.equal(rule.getSensor().getName(), sensor_2.getName()) && Objects.equal(rule.getState().getName(), state_2.getName()))) {
                      String _name_9 = rule.getTrigger().getName();
                      _builder.append(_name_9, "\t");
                    }
                  }
                }
              }
              _builder.append("\"},");
            }
          }
          _builder.append("],0,\"");
          EObject _eContainer_5 = sensor_2.eContainer().eContainer();
          String _name_10 = ((Greenhouse) _eContainer_5).getName();
          _builder.append(_name_10, "\t");
          _builder.append("/");
          EObject _eContainer_6 = sensor_2.eContainer();
          String _name_11 = ((Row) _eContainer_6).getName();
          _builder.append(_name_11, "\t");
          _builder.append("/");
          String _rowActuatorName = this.getRowActuatorName(model, sensor_2);
          _builder.append(_rowActuatorName, "\t");
          _builder.append("\")");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("sensors.append(sr");
          int _indexOf_3 = allRowSensors.indexOf(sensor_2);
          _builder.append(_indexOf_3, "\t");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("subscribe(client, sr");
          int _indexOf_4 = allRowSensors.indexOf(sensor_2);
          _builder.append(_indexOf_4, "\t");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        for(final GreenhouseSensor sensor_3 : allGreenhouseSensors) {
          _builder.append("\t");
          _builder.append("sg");
          int _indexOf_5 = allGreenhouseSensors.indexOf(sensor_3);
          _builder.append(_indexOf_5, "\t");
          _builder.append(" = Sensor(\"");
          EObject _eContainer_7 = sensor_3.eContainer();
          String _name_12 = ((Greenhouse) _eContainer_7).getName();
          _builder.append(_name_12, "\t");
          _builder.append("/");
          String _name_13 = sensor_3.getName();
          _builder.append(_name_13, "\t");
          _builder.append("\",[");
          {
            EList<State> _states_3 = sensor_3.getStates();
            for(final State state_3 : _states_3) {
              _builder.append("{\"");
              String _name_14 = state_3.getName();
              _builder.append(_name_14, "\t");
              _builder.append("\":\"");
              {
                for(final GreenhouseRuleSet rule_1 : allGreenhouseRuleset) {
                  {
                    if ((Objects.equal(rule_1.getSensor().getName(), sensor_3.getName()) && Objects.equal(rule_1.getState().getName(), state_3.getName()))) {
                      String _name_15 = rule_1.getSettingvalue().getName();
                      _builder.append(_name_15, "\t");
                    }
                  }
                }
              }
              _builder.append("\"},");
            }
          }
          _builder.append("],0,\"");
          EObject _eContainer_8 = sensor_3.eContainer();
          String _name_16 = ((Greenhouse) _eContainer_8).getName();
          _builder.append(_name_16, "\t");
          _builder.append("/");
          String _greenhouseActuatorName = this.getGreenhouseActuatorName(model, sensor_3);
          _builder.append(_greenhouseActuatorName, "\t");
          _builder.append("\")");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("sensors.append(sg");
          int _indexOf_6 = allGreenhouseSensors.indexOf(sensor_3);
          _builder.append(_indexOf_6, "\t");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("subscribe(client, sg");
          int _indexOf_7 = allGreenhouseSensors.indexOf(sensor_3);
          _builder.append(_indexOf_7, "\t");
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("client.loop_forever()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("if __name__ == \'__main__\':");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("run()");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String getRowActuatorName(final Model model, final RowSensor sensor) {
    final EObject root = EcoreUtil2.getRootContainer(model);
    final List<RowRuleSet> allRowRuleset = EcoreUtil2.<RowRuleSet>getAllContentsOfType(root, RowRuleSet.class);
    for (final RowRuleSet rule : allRowRuleset) {
      String _name = rule.getSensor().getName();
      String _name_1 = sensor.getName();
      boolean _equals = Objects.equal(_name, _name_1);
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        String _name_2 = rule.getActuator().getName();
        _builder.append(_name_2);
        return _builder.toString();
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    return _builder_1.toString();
  }
  
  public String getGreenhouseActuatorName(final Model model, final GreenhouseSensor sensor) {
    final EObject root = EcoreUtil2.getRootContainer(model);
    final List<GreenhouseRuleSet> allGreenhouseRuleset = EcoreUtil2.<GreenhouseRuleSet>getAllContentsOfType(root, GreenhouseRuleSet.class);
    for (final GreenhouseRuleSet rule : allGreenhouseRuleset) {
      String _name = rule.getSensor().getName();
      String _name_1 = sensor.getName();
      boolean _equals = Objects.equal(_name, _name_1);
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        String _name_2 = rule.getActuator().getName();
        _builder.append(_name_2);
        return _builder.toString();
      }
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    return _builder_1.toString();
  }
  
  public CharSequence compilePeripheral(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("from paho.mqtt import client as mqtt_client");
    _builder.newLine();
    _builder.append("class Sensor:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("currentState = \"\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def __init__(self, name, states, variable, actuator):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.name = name");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.states = states");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.variable = variable");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.actuator = actuator");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def updateSensor(self, variable, client):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.variable = variable");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ruleCheck(variable, self, client, self.states)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def updateSensorState(self, state, client):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("theKey = next(iter(state))");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("self.currentState = theKey");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("publish(client, self.actuator, state.get(self.currentState))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("broker = \'localhost\'");
    _builder.newLine();
    _builder.append("port = 1883");
    _builder.newLine();
    _builder.append("topic1 = \"temp\"");
    _builder.newLine();
    _builder.append("topic2 = \"humidity\"");
    _builder.newLine();
    _builder.append("topic3 = \"co2\"");
    _builder.newLine();
    _builder.append("topic4 = \"moisture\"");
    _builder.newLine();
    _builder.append("client_id = \'python-mqtt-rulechecker\'");
    _builder.newLine();
    _builder.append("username = \'my_user\'");
    _builder.newLine();
    _builder.append("password = \'bendevictor\'");
    _builder.newLine();
    _builder.append("manual = 0");
    _builder.newLine();
    _builder.append("sensors = []");
    _builder.newLine();
    _builder.append("def connect_mqtt() -> mqtt_client:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def on_connect(client, userdata, flags, rc):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if rc == 0:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\"Connected to MQTT Broker!\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(\"Failed to connect, return code %d\\n\", rc)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client = mqtt_client.Client(client_id)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.username_pw_set(username, password)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.on_connect = on_connect");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.connect(broker, port)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return client");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def subscribe(client: mqtt_client, sensor):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def on_message(client, userdata, msg):");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("print(f\"Received `{msg.payload.decode()}` from `{msg.topic}` topic\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for s in sensors:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if s.name == msg.topic:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("s.updateSensor(msg.payload.decode(), client)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("#ruleCheck(msg.payload.decode(), msg.topic, client)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.subscribe(sensor.name)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.on_message = on_message");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def publish(client,topic, message):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("msg = message");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if manual == 0:");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("result = client.publish(topic, msg)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# result: [0, 1]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("status = result[0]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if status == 0:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(f\"Send `{msg}` to topic `{topic}`\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("print(f\"Failed to send message to topic {topic}\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def ruleCheck(value, sensor, client,states):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if sensor.name == \"manual\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("global manual ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("manual = int(value)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if sensor.name == \"greenify/tomatoes/moistSensor\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if float(value)  > 1000:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[0],client)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elif float(value) > 500 and float(value) < 1000:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[1],client)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elif float(value)  < 500:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[2],client)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if sensor.name == \"greenify/tempSensor\":");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if float(value)  > 40:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[0],client)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elif float(value) > 25 and float(value) < 40:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[1],client)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("elif float(value)  < 25:");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("sensor.updateSensorState(states[2],client)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def run():");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client = connect_mqtt()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("manualState = Sensor(\"manual\", None, 0, None)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("t1 = Sensor(\"greenify/tomatoes/moistSensor\", [{\"moist\":\"stop\"}, {\"optimal\":\"stop\"}, {\"dry\":\"start\"}], 0, \"greenify/tomatoes/pump\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("t2 = Sensor(\"greenify/tempSensor\", [{\"hot\":\"max\"}, {\"optimal\":\"min\"}, {\"cold\":\"stop\"}], 0, \"greenify/fan\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sensors.append(manualState)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sensors.append(t1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("sensors.append(t2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, t1)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, t2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subscribe(client, manualState)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("client.loop_forever()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if __name__ == \'__main__\':");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("run()");
    _builder.newLine();
    return _builder;
  }
  
  public String getTopics(final Model model) {
    final EObject root = EcoreUtil2.getRootContainer(model);
    final Function1<RowSensor, Boolean> _function = (RowSensor it) -> {
      String _name = it.getController().getName();
      String _name_1 = it.getController().getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    final Iterable<RowSensor> allSensors = IterableExtensions.<RowSensor>filter(EcoreUtil2.<RowSensor>getAllContentsOfType(root, RowSensor.class), _function);
    final Function1<GreenhouseSensor, Boolean> _function_1 = (GreenhouseSensor it) -> {
      String _name = it.getController().getName();
      String _name_1 = it.getController().getName();
      return Boolean.valueOf(Objects.equal(_name, _name_1));
    };
    final Iterable<GreenhouseSensor> allGlobalSensors = IterableExtensions.<GreenhouseSensor>filter(EcoreUtil2.<GreenhouseSensor>getAllContentsOfType(root, GreenhouseSensor.class), _function_1);
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _isEmpty = IterableExtensions.isEmpty(allSensors);
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          for(final RowSensor sensor : allSensors) {
            _builder.append("chan ");
            EObject _eContainer = sensor.eContainer().eContainer();
            String _name = ((Greenhouse) _eContainer).getName();
            _builder.append(_name);
            _builder.append("_");
            EObject _eContainer_1 = sensor.eContainer();
            String _name_1 = ((Row) _eContainer_1).getName();
            _builder.append(_name_1);
            _builder.append("_");
            String _name_2 = sensor.getName();
            _builder.append(_name_2);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      boolean _isEmpty_1 = IterableExtensions.isEmpty(allGlobalSensors);
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        {
          for(final GreenhouseSensor sensor_1 : allGlobalSensors) {
            _builder.append("chan ");
            EObject _eContainer_2 = sensor_1.eContainer();
            String _name_3 = ((Greenhouse) _eContainer_2).getName();
            _builder.append(_name_3);
            _builder.append("_");
            String _name_4 = sensor_1.getName();
            _builder.append(_name_4);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String getAllActuators(final Model model) {
    final EObject root = EcoreUtil2.getRootContainer(model);
    final List<RowActuator> allRowActuators = EcoreUtil2.<RowActuator>getAllContentsOfType(root, RowActuator.class);
    final List<GreenhouseActuator> allGreenhouseActuators = EcoreUtil2.<GreenhouseActuator>getAllContentsOfType(root, GreenhouseActuator.class);
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _isEmpty = allRowActuators.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          boolean _hasElements = false;
          for(final RowActuator rowActuator : allRowActuators) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate("\n", "");
            }
            _builder.append("process ");
            String _upperCase = rowActuator.getName().toUpperCase();
            _builder.append(_upperCase);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("state");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<Action> _action = rowActuator.getAction();
              boolean _hasElements_1 = false;
              for(final Action action : _action) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                String _name = action.getName();
                _builder.append(_name, "\t");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("init");
            _builder.newLine();
            _builder.append("\t");
            String _name_1 = rowActuator.getAction().get(0).getName();
            _builder.append(_name_1, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("trans");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<Action> _action_1 = rowActuator.getAction();
              boolean _hasElements_2 = false;
              for(final Action action1 : _action_1) {
                if (!_hasElements_2) {
                  _hasElements_2 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                {
                  EList<Action> _action_2 = rowActuator.getAction();
                  boolean _hasElements_3 = false;
                  for(final Action action2 : _action_2) {
                    if (!_hasElements_3) {
                      _hasElements_3 = true;
                    } else {
                      _builder.appendImmediate(",\n", "\t");
                    }
                    String _name_2 = action1.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append(" -> ");
                    String _name_3 = action2.getName();
                    _builder.append(_name_3, "\t");
                    _builder.append("{}");
                  }
                }
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    {
      boolean _isEmpty_1 = allGreenhouseActuators.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        {
          boolean _hasElements_4 = false;
          for(final GreenhouseActuator greenhouseActuator : allGreenhouseActuators) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate("\n", "");
            }
            _builder.append("process ");
            String _upperCase_1 = greenhouseActuator.getName().toUpperCase();
            _builder.append(_upperCase_1);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("state");
            _builder.newLine();
            _builder.append("    ");
            {
              EList<Action> _action_3 = greenhouseActuator.getAction();
              boolean _hasElements_5 = false;
              for(final Action action_1 : _action_3) {
                if (!_hasElements_5) {
                  _hasElements_5 = true;
                } else {
                  _builder.appendImmediate(",\n", "    ");
                }
                String _name_4 = action_1.getName();
                _builder.append(_name_4, "    ");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("init");
            _builder.newLine();
            _builder.append("    ");
            String _name_5 = greenhouseActuator.getAction().get(0).getName();
            _builder.append(_name_5, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("trans");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<Action> _action_4 = greenhouseActuator.getAction();
              boolean _hasElements_6 = false;
              for(final Action action1_1 : _action_4) {
                if (!_hasElements_6) {
                  _hasElements_6 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                {
                  EList<Action> _action_5 = greenhouseActuator.getAction();
                  boolean _hasElements_7 = false;
                  for(final Action action2_1 : _action_5) {
                    if (!_hasElements_7) {
                      _hasElements_7 = true;
                    } else {
                      _builder.appendImmediate(",\n", "\t");
                    }
                    String _name_6 = action1_1.getName();
                    _builder.append(_name_6, "\t");
                    _builder.append(" -> ");
                    String _name_7 = action2_1.getName();
                    _builder.append(_name_7, "\t");
                    _builder.append("{}");
                  }
                }
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public String getAllSensors(final Model model) {
    final EObject root = EcoreUtil2.getRootContainer(model);
    final List<RowSensor> allRowSensors = EcoreUtil2.<RowSensor>getAllContentsOfType(root, RowSensor.class);
    final List<GreenhouseSensor> allGreenhouseSensors = EcoreUtil2.<GreenhouseSensor>getAllContentsOfType(root, GreenhouseSensor.class);
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _isEmpty = allRowSensors.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        {
          boolean _hasElements = false;
          for(final RowSensor rowSensor : allRowSensors) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate("\n", "");
            }
            _builder.append("process ");
            String _upperCase = rowSensor.getName().toUpperCase();
            _builder.append(_upperCase);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("state");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<State> _states = rowSensor.getStates();
              boolean _hasElements_1 = false;
              for(final State state : _states) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                String _name = state.getName();
                _builder.append(_name, "\t");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("init");
            _builder.newLine();
            _builder.append("\t");
            String _name_1 = rowSensor.getStates().get(0).getName();
            _builder.append(_name_1, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("trans");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<State> _states_1 = rowSensor.getStates();
              boolean _hasElements_2 = false;
              for(final State state1 : _states_1) {
                if (!_hasElements_2) {
                  _hasElements_2 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                {
                  EList<State> _states_2 = rowSensor.getStates();
                  boolean _hasElements_3 = false;
                  for(final State state2 : _states_2) {
                    if (!_hasElements_3) {
                      _hasElements_3 = true;
                    } else {
                      _builder.appendImmediate(",\n", "\t");
                    }
                    String _name_2 = state1.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append(" -> ");
                    String _name_3 = state2.getName();
                    _builder.append(_name_3, "\t");
                    _builder.append("{}");
                  }
                }
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    {
      boolean _isEmpty_1 = allGreenhouseSensors.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        {
          boolean _hasElements_4 = false;
          for(final GreenhouseSensor greenhouseSensor : allGreenhouseSensors) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder.appendImmediate("\n", "");
            }
            _builder.append("process ");
            String _upperCase_1 = greenhouseSensor.getName().toUpperCase();
            _builder.append(_upperCase_1);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("state");
            _builder.newLine();
            _builder.append("    ");
            {
              EList<State> _states_3 = greenhouseSensor.getStates();
              boolean _hasElements_5 = false;
              for(final State state_1 : _states_3) {
                if (!_hasElements_5) {
                  _hasElements_5 = true;
                } else {
                  _builder.appendImmediate(",\n", "    ");
                }
                String _name_4 = state_1.getName();
                _builder.append(_name_4, "    ");
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("init");
            _builder.newLine();
            _builder.append("    ");
            String _name_5 = greenhouseSensor.getStates().get(0).getName();
            _builder.append(_name_5, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("trans");
            _builder.newLine();
            _builder.append("\t");
            {
              EList<State> _states_4 = greenhouseSensor.getStates();
              boolean _hasElements_6 = false;
              for(final State state1_1 : _states_4) {
                if (!_hasElements_6) {
                  _hasElements_6 = true;
                } else {
                  _builder.appendImmediate(",\n", "\t");
                }
                {
                  EList<State> _states_5 = greenhouseSensor.getStates();
                  boolean _hasElements_7 = false;
                  for(final State state2_1 : _states_5) {
                    if (!_hasElements_7) {
                      _hasElements_7 = true;
                    } else {
                      _builder.appendImmediate(",\n", "\t");
                    }
                    String _name_6 = state1_1.getName();
                    _builder.append(_name_6, "\t");
                    _builder.append(" -> ");
                    String _name_7 = state2_1.getName();
                    _builder.append(_name_7, "\t");
                    _builder.append("{}");
                  }
                }
              }
            }
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence instantiateVerificationModels(final Model model) {
    CharSequence _xblockexpression = null;
    {
      final EObject root = EcoreUtil2.getRootContainer(model);
      final List<RowSensor> allRowSensors = EcoreUtil2.<RowSensor>getAllContentsOfType(root, RowSensor.class);
      final List<GreenhouseSensor> allGreenhouseSensors = EcoreUtil2.<GreenhouseSensor>getAllContentsOfType(root, GreenhouseSensor.class);
      final List<RowActuator> allRowActuators = EcoreUtil2.<RowActuator>getAllContentsOfType(root, RowActuator.class);
      final List<GreenhouseActuator> allGreenhouseActuators = EcoreUtil2.<GreenhouseActuator>getAllContentsOfType(root, GreenhouseActuator.class);
      StringConcatenation _builder = new StringConcatenation();
      {
        boolean _isEmpty = allRowSensors.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          {
            for(final RowSensor rowSensor : allRowSensors) {
              String _lowerCase = rowSensor.getName().toLowerCase();
              _builder.append(_lowerCase);
              _builder.append(" := ");
              String _upperCase = rowSensor.getName().toUpperCase();
              _builder.append(_upperCase);
              _builder.append("();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      {
        boolean _isEmpty_1 = allGreenhouseSensors.isEmpty();
        boolean _not_1 = (!_isEmpty_1);
        if (_not_1) {
          {
            for(final GreenhouseSensor greenhouseSensor : allGreenhouseSensors) {
              String _lowerCase_1 = greenhouseSensor.getName().toLowerCase();
              _builder.append(_lowerCase_1);
              _builder.append(" := ");
              String _upperCase_1 = greenhouseSensor.getName().toUpperCase();
              _builder.append(_upperCase_1);
              _builder.append("();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      {
        boolean _isEmpty_2 = allRowActuators.isEmpty();
        boolean _not_2 = (!_isEmpty_2);
        if (_not_2) {
          {
            for(final RowActuator rowActuators : allRowActuators) {
              String _lowerCase_2 = rowActuators.getName().toLowerCase();
              _builder.append(_lowerCase_2);
              _builder.append(" := ");
              String _upperCase_2 = rowActuators.getName().toUpperCase();
              _builder.append(_upperCase_2);
              _builder.append("();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      {
        boolean _isEmpty_3 = allGreenhouseActuators.isEmpty();
        boolean _not_3 = (!_isEmpty_3);
        if (_not_3) {
          {
            for(final GreenhouseActuator greenhouseActuators : allGreenhouseActuators) {
              String _lowerCase_3 = greenhouseActuators.getName().toLowerCase();
              _builder.append(_lowerCase_3);
              _builder.append(" := ");
              String _upperCase_3 = greenhouseActuators.getName().toUpperCase();
              _builder.append(_upperCase_3);
              _builder.append("();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      _builder.append("system ");
      {
        boolean _isEmpty_4 = allRowSensors.isEmpty();
        boolean _not_4 = (!_isEmpty_4);
        if (_not_4) {
          {
            boolean _hasElements = false;
            for(final RowSensor rowSensor_1 : allRowSensors) {
              if (!_hasElements) {
                _hasElements = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_4 = rowSensor_1.getName().toLowerCase();
              _builder.append(_lowerCase_4);
            }
          }
        }
      }
      _builder.append(", ");
      {
        boolean _isEmpty_5 = allGreenhouseSensors.isEmpty();
        boolean _not_5 = (!_isEmpty_5);
        if (_not_5) {
          {
            boolean _hasElements_1 = false;
            for(final GreenhouseSensor greenhouseSensor_1 : allGreenhouseSensors) {
              if (!_hasElements_1) {
                _hasElements_1 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_5 = greenhouseSensor_1.getName().toLowerCase();
              _builder.append(_lowerCase_5);
            }
          }
        }
      }
      _builder.append(", ");
      {
        boolean _isEmpty_6 = allRowActuators.isEmpty();
        boolean _not_6 = (!_isEmpty_6);
        if (_not_6) {
          {
            boolean _hasElements_2 = false;
            for(final RowActuator rowActuators_1 : allRowActuators) {
              if (!_hasElements_2) {
                _hasElements_2 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_6 = rowActuators_1.getName().toLowerCase();
              _builder.append(_lowerCase_6);
            }
          }
        }
      }
      _builder.append(", ");
      {
        boolean _isEmpty_7 = allGreenhouseActuators.isEmpty();
        boolean _not_7 = (!_isEmpty_7);
        if (_not_7) {
          {
            boolean _hasElements_3 = false;
            for(final GreenhouseActuator greenhouseActuators_1 : allGreenhouseActuators) {
              if (!_hasElements_3) {
                _hasElements_3 = true;
              } else {
                _builder.appendImmediate(", ", "");
              }
              String _lowerCase_7 = greenhouseActuators_1.getName().toLowerCase();
              _builder.append(_lowerCase_7);
            }
          }
        }
      }
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileVerification(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    String _topics = this.getTopics(model);
    _builder.append(_topics);
    _builder.newLineIfNotEmpty();
    String _allActuators = this.getAllActuators(model);
    _builder.append(_allActuators);
    _builder.newLineIfNotEmpty();
    String _allSensors = this.getAllSensors(model);
    _builder.append(_allSensors);
    _builder.newLineIfNotEmpty();
    CharSequence _instantiateVerificationModels = this.instantiateVerificationModels(model);
    _builder.append(_instantiateVerificationModels);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected static String _computeExpression(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _computeExpression(final Plus exp) {
    String _computeExpression = GreenhouseGenerator.computeExpression(exp.getLeft());
    String _plus = ("(" + _computeExpression);
    String _plus_1 = (_plus + "+");
    String _computeExpression_1 = GreenhouseGenerator.computeExpression(exp.getRight());
    String _plus_2 = (_plus_1 + _computeExpression_1);
    return (_plus_2 + ")");
  }
  
  protected static String _computeExpression(final Minus exp) {
    String _computeExpression = GreenhouseGenerator.computeExpression(exp.getLeft());
    String _plus = ("(" + _computeExpression);
    String _plus_1 = (_plus + "-");
    String _computeExpression_1 = GreenhouseGenerator.computeExpression(exp.getRight());
    String _plus_2 = (_plus_1 + _computeExpression_1);
    return (_plus_2 + ")");
  }
  
  protected static String _computeExpression(final Mult exp) {
    String _computeExpression = GreenhouseGenerator.computeExpression(exp.getLeft());
    String _plus = ("(" + _computeExpression);
    String _plus_1 = (_plus + "*");
    String _computeExpression_1 = GreenhouseGenerator.computeExpression(exp.getRight());
    String _plus_2 = (_plus_1 + _computeExpression_1);
    return (_plus_2 + ")");
  }
  
  protected static String _computeExpression(final Div exp) {
    String _computeExpression = GreenhouseGenerator.computeExpression(exp.getLeft());
    String _plus = ("(" + _computeExpression);
    String _plus_1 = (_plus + "/");
    String _computeExpression_1 = GreenhouseGenerator.computeExpression(exp.getRight());
    String _plus_2 = (_plus_1 + _computeExpression_1);
    return (_plus_2 + ")");
  }
  
  public static String computeExpression(final Expression exp) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
